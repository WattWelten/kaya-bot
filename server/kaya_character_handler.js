const ContextMemory = require('./context_memory');
const AdvancedPersonaDetection = require('./advanced_persona_detection');

class KAYACharacterHandler {
    constructor() {
        this.agentHandler = null; // Lazy loading f√ºr Agent Handler
        this.llmService = null; // Lazy loading
        this.useLLM = process.env.USE_LLM === 'true';
        this.contextMemory = new ContextMemory();
        this.personaDetection = new AdvancedPersonaDetection();
    }
    
    // Lazy loading f√ºr Agent Handler
    getAgentHandler() {
        if (!this.agentHandler) {
            const KAYAAgentHandler = require('./kaya_agent_handler');
        this.agentHandler = new KAYAAgentHandler();
        }
        return this.agentHandler;
    }
    
    // Lazy loading f√ºr LLM Service
    getLLMService() {
        if (!this.llmService) {
            const LLMService = require('./llm_service');
            this.llmService = new LLMService();
        }
        return this.llmService;
    }
    
    async generateResponse(query, userMessage, sessionId = 'default') {
        // Context-Memory: Nachricht zur Session hinzuf√ºgen
        this.contextMemory.addMessage(sessionId, query, 'user');
        
        // Persona-Analyse durchf√ºhren
        const session = this.contextMemory.getSession(sessionId);
        const personaAnalysis = this.personaDetection.analyzePersona(session.messages, session.context);
        
        console.log(`üß† Persona-Analyse: ${personaAnalysis.persona.persona} (${personaAnalysis.emotionalState.state}, ${personaAnalysis.urgency.level})`);
        
        // Bestimme zust√§ndigen Agent
        const agent = this.getAgentHandler().routeToAgent(query);
        
        let response;
        if (agent === 'kaya') {
            response = this.generateKAYAResponse(query, personaAnalysis);
        } else {
            response = this.generateAgentResponse(agent, query, personaAnalysis);
        }

        // Context-Memory: KAYA-Antwort hinzuf√ºgen
        this.contextMemory.addMessage(sessionId, response.response, 'kaya', {
            agent: agent,
            persona: personaAnalysis.persona.persona,
            emotionalState: personaAnalysis.emotionalState.state,
            urgency: personaAnalysis.urgency.level
        });

        // LLM-Enhancement mit Context
        if (this.useLLM && !response.fallback) {
            try {
                const llmService = this.getLLMService();
                const contextPrompt = this.contextMemory.generateContextPrompt(session);
                response = await llmService.enhanceResponseWithContext(response, query, contextPrompt, personaAnalysis);
            } catch (error) {
                console.error('LLM-Enhancement Fehler:', error);
                // Verwende urspr√ºngliche Antwort als Fallback
            }
        }

        return response;
    }
    
    generateKAYAResponse(query, personaAnalysis = null) {
        // B√ºrgerzentrierte Dialog-Optimierung
        const intention = this.analyzeCitizenIntention(query);
        const response = this.generateDirectResponse(query, intention, personaAnalysis);
        
        return {
            agent: 'kaya',
            response: response.response,
            links: response.links,
            confidence: 0.9,
            source: 'kaya',
            enhanced: false,
            context: {
                persona: personaAnalysis?.persona?.persona || 'standard_citizen',
                emotionalState: personaAnalysis?.emotionalState?.state || 'neutral',
                urgency: intention.urgency
            }
        };
    }

    /**
     * Analysiert die wahre Intention des B√ºrgers
     */
    analyzeCitizenIntention(query) {
        const lowerQuery = query.toLowerCase();
        
        // Bauantrag-Intentionen
        if (lowerQuery.includes('bauantrag') || lowerQuery.includes('bauen') || lowerQuery.includes('haus')) {
            return {
                type: 'bauantrag',
                urgency: lowerQuery.includes('eilig') || lowerQuery.includes('dringend') ? 'high' : 'normal',
                needs: ['formulare', 'unterlagen', 'termin', 'kosten'],
                location: this.extractLocation(query)
            };
        }
        
        // Formular-Intentionen
        if (lowerQuery.includes('formular') || lowerQuery.includes('antrag') || lowerQuery.includes('beantragen')) {
            return {
                type: 'formular',
                urgency: 'normal',
                needs: ['download', 'ausf√ºllen', 'einreichen'],
                specific: this.extractSpecificForm(query)
            };
        }
        
        // Kontakt-Intentionen
        if (lowerQuery.includes('kontakt') || lowerQuery.includes('telefon') || lowerQuery.includes('anrufen')) {
            return {
                type: 'kontakt',
                urgency: 'high',
                needs: ['telefonnummer', 'email', 'adresse', '√∂ffnungszeiten']
            };
        }
        
        // F√ºhrerschein-Intentionen
        if (lowerQuery.includes('f√ºhrerschein') || lowerQuery.includes('f√ºhrerschein') || lowerQuery.includes('fahrerlaubnis')) {
            return {
                type: 'f√ºhrerschein',
                urgency: lowerQuery.includes('eilig') || lowerQuery.includes('dringend') ? 'high' : 'normal',
                needs: ['termin', 'formulare', 'unterlagen', 'kosten'],
                location: this.extractLocation(query)
            };
        }
        
        // Gewerbe-Intentionen
        if (lowerQuery.includes('gewerbe') || lowerQuery.includes('gewerbeanmeldung') || lowerQuery.includes('selbst√§ndig')) {
            return {
                type: 'gewerbe',
                urgency: 'normal',
                needs: ['formulare', 'unterlagen', 'beratung'],
                location: this.extractLocation(query)
            };
        }
        
        // KFZ-Zulassung-Intentionen
        if (lowerQuery.includes('auto') || lowerQuery.includes('fahrzeug') || lowerQuery.includes('zulassen') || 
            lowerQuery.includes('kfz') || lowerQuery.includes('kennzeichen') || lowerQuery.includes('zulassung')) {
            return {
                type: 'kfz_zulassung',
                urgency: lowerQuery.includes('eilig') || lowerQuery.includes('dringend') ? 'high' : 'normal',
                needs: ['termin', 'formulare', 'unterlagen', 'kosten'],
                location: this.extractLocation(query)
            };
        }
        
        // Termin-Intentionen
        if (lowerQuery.includes('termin') || lowerQuery.includes('vereinbaren') || lowerQuery.includes('wann')) {
            return {
                type: 'termin',
                urgency: 'normal',
                needs: ['online_termin', '√∂ffnungszeiten', 'verf√ºgbarkeit']
            };
        }
        
        // Allgemeine Information
        return {
            type: 'information',
            urgency: 'normal',
            needs: ['√ºbersicht', 'erkl√§rung', 'hilfe']
        };
    }

    /**
     * Generiert direkte, b√ºrgerzentrierte Antworten
     */
    generateDirectResponse(query, intention, personaAnalysis) {
        const tone = personaAnalysis?.emotionalState?.state === 'frustrated' ? 'beruhigend' : 'freundlich';
        
        switch (intention.type) {
            case 'bauantrag':
                return this.generateBauantragResponse(intention, tone);
            case 'formular':
                return this.generateFormularResponse(intention, tone);
            case 'kontakt':
                return this.generateKontaktResponse(intention, tone);
            case 'termin':
                return this.generateTerminResponse(intention, tone);
            case 'kfz_zulassung':
                return this.generateKFZZulassungResponse(intention, tone);
            case 'f√ºhrerschein':
                return this.generateF√ºhrerscheinResponse(intention, tone);
            case 'gewerbe':
                return this.generateGewerbeResponse(intention, tone);
            default:
                return this.generateGeneralResponse(query, tone);
        }
    }

    generateBauantragResponse(intention, tone) {
        const location = intention.location ? ` in ${intention.location}` : '';
        const urgency = intention.urgency === 'high' ? ' Ich verstehe, dass es eilig ist.' : '';
        
        return {
            response: `Moin! Gerne helfe ich Ihnen beim Bauantrag${location}.${urgency}

**Was Sie brauchen:**
1. **Formulare:** [Bauantrag online](https://www.oldenburg-kreis.de/planen-und-bauen/bauen-im-landkreis-oldenburg/bauantrag-online/)
2. **Unterlagen:** [Antr√§ge und Formulare](https://www.oldenburg-kreis.de/planen-und-bauen/bauen-im-landkreis-oldenburg/antraege-und-formulare/)
3. **Termin:** [Online-Terminvereinbarung](https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/online-terminvereinbarung/)

**Direkter Kontakt:**
‚Ä¢ **Tel.: 04431 85-0** (Mo-Fr 8-16 Uhr)
‚Ä¢ **E-Mail:** kontakt@landkreis-oldenburg.de

Haben Sie bereits alle Unterlagen oder brauchen Sie Hilfe bei einem bestimmten Schritt?`,
            links: [
                { title: 'Bauantrag online', url: 'https://www.oldenburg-kreis.de/planen-und-bauen/bauen-im-landkreis-oldenburg/bauantrag-online/' },
                { title: 'Antr√§ge und Formulare', url: 'https://www.oldenburg-kreis.de/planen-und-bauen/bauen-im-landkreis-oldenburg/antraege-und-formulare/' },
                { title: 'Online-Terminvereinbarung', url: 'https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/online-terminvereinbarung/' }
            ]
        };
    }

    generateFormularResponse(intention, tone) {
        const specific = intention.specific ? ` f√ºr ${intention.specific}` : '';
        
        return {
            response: `Hier sind die wichtigsten Formulare${specific}:

**Direkte Downloads:**
‚Ä¢ [Alle Antr√§ge und Formulare](https://www.oldenburg-kreis.de/planen-und-bauen/bauen-im-landkreis-oldenburg/antraege-und-formulare/)
‚Ä¢ [Online-Services](https://www.oldenburg-kreis.de/portal/)

**Schnelle Hilfe:**
‚Ä¢ **Tel.: 04431 85-0** - Wir helfen beim Ausf√ºllen
‚Ä¢ **E-Mail:** kontakt@landkreis-oldenburg.de

Welches Formular ben√∂tigen Sie genau? Dann kann ich Ihnen den direkten Link geben.`,
            links: [
                { title: 'Alle Antr√§ge und Formulare', url: 'https://www.oldenburg-kreis.de/planen-und-bauen/bauen-im-landkreis-oldenburg/antraege-und-formulare/' },
                { title: 'Online-Services', url: 'https://www.oldenburg-kreis.de/portal/' }
            ]
        };
    }

    generateKontaktResponse(intention, tone) {
        return {
            response: `**Direkte Kontakte:**

**Hauptnummer:** 04431 85-0
‚Ä¢ Mo-Fr: 8-16 Uhr
‚Ä¢ F√ºr alle Anliegen

**E-Mail:** kontakt@landkreis-oldenburg.de
‚Ä¢ Antwort innerhalb 24h

**Adresse:**
Landkreis Oldenburg
Delmenhorster Stra√üe 6
27793 Wildeshausen

**Online-Termin:** [Terminvereinbarung](https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/online-terminvereinbarung/)

Wof√ºr genau brauchen Sie Kontakt? Dann kann ich Ihnen die richtige Abteilung nennen.`,
            links: [
                { title: 'Kontaktformular', url: 'https://www.oldenburg-kreis.de/portal/kontakt.html' },
                { title: 'Online-Terminvereinbarung', url: 'https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/online-terminvereinbarung/' }
            ]
        };
    }

    generateTerminResponse(intention, tone) {
        return {
            response: `**Terminvereinbarung:**

**Online-Termin:** [Terminvereinbarung](https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/online-terminvereinbarung/)
‚Ä¢ Schnell und einfach
‚Ä¢ Verf√ºgbare Zeiten sofort sichtbar

**Telefonisch:** 04431 85-0
‚Ä¢ Mo-Fr: 8-16 Uhr
‚Ä¢ Pers√∂nliche Beratung

**√ñffnungszeiten:**
‚Ä¢ Mo-Do: 8-16 Uhr
‚Ä¢ Fr: 8-13 Uhr

F√ºr welches Anliegen brauchen Sie einen Termin?`,
            links: [
                { title: 'Online-Terminvereinbarung', url: 'https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/online-terminvereinbarung/' }
            ]
        };
    }

    generateKFZZulassungResponse(intention, tone) {
        const location = intention.location ? ` in ${intention.location}` : '';
        const urgency = intention.urgency === 'high' ? ' Ich verstehe, dass es eilig ist.' : '';
        
        return {
            response: `Moin! Perfekt - ich helfe dir sofort bei der KFZ-Zulassung${location}.${urgency}

**üéØ Hier ist dein direkter Weg:**

**1. üìã Online-Termin buchen:**
   ‚Üí [Terminvereinbarung KFZ-Zulassung](https://www.oldenburg-kreis.de/verkehr/kfz-zulassung/terminvereinbarung/)

**2. üìÑ Formulare ausf√ºllen:**
   ‚Üí [Antragsformulare KFZ](https://www.oldenburg-kreis.de/verkehr/kfz-zulassung/formulare/)

**3. üìû Sofort anrufen:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**üéØ Deine n√§chste Aktion:** Klick auf den Termin-Link oder ruf direkt an!

**Brauchst du Hilfe bei den Unterlagen? Sag mir, was du schon hast!**`,
            links: [
                { title: 'Terminvereinbarung KFZ-Zulassung', url: 'https://www.oldenburg-kreis.de/verkehr/kfz-zulassung/terminvereinbarung/' },
                { title: 'Antragsformulare KFZ', url: 'https://www.oldenburg-kreis.de/verkehr/kfz-zulassung/formulare/' }
            ]
        };
    }

    generateF√ºhrerscheinResponse(intention, tone) {
        const location = intention.location ? ` in ${intention.location}` : '';
        const urgency = intention.urgency === 'high' ? ' Ich verstehe, dass es eilig ist.' : '';
        
        return {
            response: `Moin! Gerne helfe ich dir beim F√ºhrerschein${location}.${urgency}

**üéØ Hier ist dein direkter Weg:**

**1. üìã Online-Termin buchen:**
   ‚Üí [Terminvereinbarung F√ºhrerscheine](https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/terminvereinbarung-fuehrerscheine/)

**2. üìÑ Antr√§ge und Formulare:**
   ‚Üí [F√ºhrerschein-Antr√§ge](https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/antragsarten-erforderliche-unterlagen-kosten-etc-/)

**3. üìû Sofort anrufen:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**üéØ Deine n√§chste Aktion:** Klick auf den Termin-Link oder ruf direkt an!

**Brauchst du Hilfe bei den Unterlagen? Sag mir, was du schon hast!**`,
            links: [
                { title: 'Terminvereinbarung F√ºhrerscheine', url: 'https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/terminvereinbarung-fuehrerscheine/' },
                { title: 'F√ºhrerschein-Antr√§ge', url: 'https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/antragsarten-erforderliche-unterlagen-kosten-etc-/' }
            ]
        };
    }

    generateGewerbeResponse(intention, tone) {
        const location = intention.location ? ` in ${intention.location}` : '';
        
        return {
            response: `Moin! Perfekt - ich helfe dir bei der Gewerbeanmeldung${location}.

**üéØ Hier ist dein direkter Weg:**

**1. üìã Online-Formular:**
   ‚Üí [Gewerbeanmeldung online](https://www.oldenburg-kreis.de/wirtschaft/gewerbeanmeldung/)

**2. üìÑ Antr√§ge und Formulare:**
   ‚Üí [Gewerbe-Antr√§ge](https://www.oldenburg-kreis.de/wirtschaft/gewerbeanmeldung/antraege-und-formulare/)

**3. üìû Beratung:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**üéØ Deine n√§chste Aktion:** Klick auf den Gewerbe-Link oder ruf direkt an!

**Brauchst du Hilfe bei den Unterlagen? Sag mir, was du schon hast!**`,
            links: [
                { title: 'Gewerbeanmeldung online', url: 'https://www.oldenburg-kreis.de/wirtschaft/gewerbeanmeldung/' },
                { title: 'Gewerbe-Antr√§ge', url: 'https://www.oldenburg-kreis.de/wirtschaft/gewerbeanmeldung/antraege-und-formulare/' }
            ]
        };
    }

    generateGeneralResponse(query, tone) {
        return {
            response: `Moin! Ich bin KAYA, Ihr digitaler Assistent f√ºr den Landkreis Oldenburg.

**Was kann ich f√ºr Sie tun:**
‚Ä¢ Formulare und Antr√§ge
‚Ä¢ Terminvereinbarungen  
‚Ä¢ Kontakte und √ñffnungszeiten
‚Ä¢ Informationen zu allen Dienstleistungen

**Schnelle Hilfe:**
‚Ä¢ **Tel.: 04431 85-0**
‚Ä¢ **E-Mail:** kontakt@landkreis-oldenburg.de

Was genau ben√∂tigen Sie? Je konkreter Sie fragen, desto besser kann ich helfen!`,
            links: []
        };
    }

    /**
     * Extrahiert Ortsangaben aus der Anfrage
     */
    extractLocation(query) {
        const locations = ['wildeshausen', 'hude', 'ganderkesee', 'hatten', 'wardenburg', 'd√∂tlingen', 'gro√üenkneten'];
        const lowerQuery = query.toLowerCase();
        
        for (const location of locations) {
            if (lowerQuery.includes(location)) {
                return location.charAt(0).toUpperCase() + location.slice(1);
            }
        }
        return null;
    }

    /**
     * Extrahiert spezifische Formular-Typen
     */
    extractSpecificForm(query) {
        const forms = {
            'bauantrag': 'Bauantrag',
            'f√ºhrerschein': 'F√ºhrerschein',
            'kfz': 'KFZ-Zulassung',
            'gewerbe': 'Gewerbeanmeldung',
            'kita': 'Kita-Anmeldung',
            'wohngeld': 'Wohngeld',
            'sozialhilfe': 'Sozialhilfe'
        };
        
        const lowerQuery = query.toLowerCase();
        for (const [key, value] of Object.entries(forms)) {
            if (lowerQuery.includes(key)) {
                return value;
            }
        }
        return null;
    }
    
    generateAgentResponse(agent, query, personaAnalysis = null) {
        const agentData = this.getAgentHandler().searchAgentData(agent, query);
        
        console.log(`Agent ${agent}: ${agentData.length} Ergebnisse f√ºr "${query}"`);
        
        if (agentData.length === 0) {
            // Fallback: Zeige allgemeine Informationen √ºber den Agent
            const agentInfo = this.getAgentInfo(agent);
            let response = {
                agent: agent,
                response: `Gerne helfe ich Ihnen bei ${agentInfo.description}. ${agentInfo.suggestion}`,
                fallback: true,
                suggestion: agentInfo.suggestion,
                confidence: 0, // Keine Daten = niedrige Konfidenz
                source: 'fallback'
            };
            
            // Persona-basierte Anpassungen f√ºr Fallback
            if (personaAnalysis) {
                if (personaAnalysis.persona.persona === 'confused_citizen') {
                    response.response = `Keine Sorge, ich helfe Ihnen gerne bei ${agentInfo.description}. ${agentInfo.suggestion}`;
                } else if (personaAnalysis.persona.persona === 'urgent_case') {
                    response.response = `Ich verstehe, dass es eilig ist. F√ºr ${agentInfo.description} kann ich Ihnen schnell helfen. ${agentInfo.suggestion}`;
                }
            }
            
            return response;
        }
        
        // Validiere Datenqualit√§t vor Antwort
        const validatedData = this.validateDataQuality(agentData);
        if (validatedData.length === 0) {
            return {
                agent: agent,
                response: `Ich habe keine verl√§sslichen Informationen zu "${query}" gefunden. Bitte kontaktieren Sie uns direkt f√ºr eine pers√∂nliche Beratung.`,
                fallback: true,
                confidence: 0,
                source: 'no_valid_data'
            };
        }
        
        // Erstelle empathische, zielgerichtete Antwort
        const response = this.createEmpatheticResponse(agent, validatedData.slice(0, 3), query);
        
        return {
            agent: agent,
            response: response,
            data: validatedData.slice(0, 3),
            links: this.extractLinks(validatedData.slice(0, 3)),
            confidence: this.calculateConfidence(validatedData, query),
            source: 'agent_data'
        };
    }
    
    validateDataQuality(data) {
        // Validiere Datenqualit√§t - nur verl√§ssliche Daten verwenden
        return data.filter(item => {
            // Mindestanforderungen f√ºr valide Daten
            return item.title && 
                   item.title.length > 10 && 
                   item.url && 
                   item.url.startsWith('http') &&
                   item.content && 
                   item.content.length > 50;
        });
    }
    
    calculateConfidence(data, query) {
        if (data.length === 0) return 0;
        
        // Berechne Konfidenz basierend auf Datenqualit√§t und Relevanz
        let confidence = 0.5; // Basis-Konfidenz
        
        // Erh√∂he Konfidenz f√ºr mehr Daten
        confidence += Math.min(data.length * 0.1, 0.3);
        
        // Erh√∂he Konfidenz f√ºr exakte Matches
        const queryLower = query.toLowerCase();
        const exactMatches = data.filter(item => 
            item.title.toLowerCase().includes(queryLower) ||
            item.content.toLowerCase().includes(queryLower)
        );
        
        if (exactMatches.length > 0) {
            confidence += 0.2;
        }
        
        return Math.min(confidence, 1.0);
    }
    
    createEmpatheticResponse(agent, data, query) {
        const queryLower = query.toLowerCase();
        
        // Empathische Einleitung basierend auf dem Anliegen
        let empatheticIntro = this.getEmpatheticIntro(agent, queryLower);
        
        // Erkl√§re den Prozess und begleite den B√ºrger
        let processExplanation = this.explainProcess(agent, queryLower);
        
        // Zeige die konkreten Optionen mit Erkl√§rungen
        let options = this.presentOptionsWithGuidance(data);
        
        // Aktive Nachfragen f√ºr weitere Unterst√ºtzung
        let followUpQuestions = this.generateFollowUpQuestions(agent, queryLower);
        
        return `${empatheticIntro}\n\n${processExplanation}\n\n${options}\n\n${followUpQuestions}`;
    }
    
    getEmpatheticIntro(agent, queryLower) {
        const intros = {
            'buergerdienste': [
                "Ich verstehe, dass Beh√∂rdeng√§nge manchmal kompliziert sein k√∂nnen. Lassen Sie mich Ihnen dabei helfen, den richtigen Weg zu finden.",
                "Gerne unterst√ºtze ich Sie bei Ihrem Anliegen. Ich erkl√§re Ihnen Schritt f√ºr Schritt, was zu tun ist.",
                "Das kann ich f√ºr Sie kl√§ren! Ich begleite Sie durch den gesamten Prozess.",
                "Kein Problem, ich helfe Ihnen gerne dabei, Ihr Anliegen erfolgreich umzusetzen."
            ],
            'ratsinfo': [
                "Ich kann Ihnen gerne bei Fragen zum Kreistag helfen. Lassen Sie mich die wichtigsten Informationen f√ºr Sie zusammenstellen.",
                "Gerne informiere ich Sie √ºber die Kreistagsangelegenheiten. Ich erkl√§re Ihnen, was Sie wissen m√ºssen.",
                "Das schaue ich gerne f√ºr Sie nach. Ich f√ºhre Sie durch die verf√ºgbaren Informationen."
            ],
            'stellenportal': [
                "Ich helfe Ihnen gerne bei der Jobsuche. Lassen Sie mich die besten M√∂glichkeiten f√ºr Sie finden.",
                "Gerne unterst√ºtze ich Sie bei Ihrer Karriereplanung. Ich zeige Ihnen, welche Optionen verf√ºgbar sind."
            ],
            'kontakte': [
                "Ich kann Ihnen gerne die richtigen Ansprechpartner nennen. Lassen Sie mich die passenden Kontakte f√ºr Sie finden.",
                "Gerne helfe ich Ihnen bei der Kontaktaufnahme. Ich erkl√§re Ihnen, wen Sie wann erreichen k√∂nnen."
            ]
        };
        
        const agentIntros = intros[agent] || ["Gerne helfe ich Ihnen bei Ihrem Anliegen."];
        return agentIntros[Math.floor(Math.random() * agentIntros.length)];
    }
    
    explainProcess(agent, queryLower) {
        const explanations = {
            'buergerdienste': [
                "Hier ist der Ablauf: Zuerst schauen wir uns an, welche Formulare Sie ben√∂tigen, dann erkl√§re ich Ihnen die einzelnen Schritte und was Sie beachten m√ºssen.",
                "Der Prozess ist eigentlich ganz √ºbersichtlich: Ich zeige Ihnen die ben√∂tigten Unterlagen und erkl√§re, wie Sie vorgehen sollten.",
                "Lassen Sie mich Ihnen den Weg durch die Beh√∂rden erkl√§ren: Welche Formulare, welche Unterlagen und welche Termine Sie einhalten m√ºssen."
            ],
            'ratsinfo': [
                "Ich erkl√§re Ihnen gerne, wie Sie an die gew√ºnschten Informationen kommen und was Sie dabei beachten sollten.",
                "Lassen Sie mich Ihnen zeigen, wo Sie die aktuellen Informationen finden und wie Sie sich √ºber neue Entwicklungen informieren k√∂nnen."
            ],
            'stellenportal': [
                "Ich f√ºhre Sie gerne durch den Bewerbungsprozess und zeige Ihnen, worauf Sie achten sollten.",
                "Lassen Sie mich Ihnen erkl√§ren, wie Sie sich erfolgreich bewerben und welche Unterlagen Sie ben√∂tigen."
            ],
            'kontakte': [
                "Ich erkl√§re Ihnen gerne, wann Sie die verschiedenen Ansprechpartner erreichen und wie Sie am besten vorgehen.",
                "Lassen Sie mich Ihnen zeigen, welche Kontakte f√ºr Ihr Anliegen am besten geeignet sind."
            ]
        };
        
        const agentExplanations = explanations[agent] || ["Ich erkl√§re Ihnen gerne den Prozess."];
        return agentExplanations[Math.floor(Math.random() * agentExplanations.length)];
    }
    
    presentOptionsWithGuidance(data) {
        let options = "";
        
        data.forEach((item, index) => {
            if (item.title) {
                options += `**${item.title}**\n`;
                
                // F√ºge hilfreiche Erkl√§rung und Anleitung hinzu
                if (item.title.toLowerCase().includes('bauantrag')) {
                    options += "Das ist Ihr Hauptformular f√ºr Bauvorhaben. Sie k√∂nnen es online ausf√ºllen oder ausdrucken. Wichtig: Sammeln Sie alle ben√∂tigten Unterlagen vorher (Grundst√ºcksunterlagen, Baupl√§ne, etc.).\n";
                } else if (item.title.toLowerCase().includes('formular')) {
                    options += "Hier finden Sie das ben√∂tigte Formular. Ich empfehle Ihnen, es online auszuf√ºllen - das spart Zeit und Fehler.\n";
                } else if (item.title.toLowerCase().includes('kontakt')) {
                    options += "Hier k√∂nnen Sie direkt Kontakt aufnehmen. Ich empfehle Ihnen, vorher anzurufen, um einen Termin zu vereinbaren.\n";
                } else if (item.title.toLowerCase().includes('kreistag')) {
                    options += "Hier finden Sie alle aktuellen Informationen. Schauen Sie regelm√§√üig vorbei, um √ºber neue Beschl√ºsse informiert zu bleiben.\n";
                }
                
                if (item.url) {
                    const linkText = this.createDescriptiveLinkText(item.title, item.url);
                    options += `\nüìã **${linkText}:** [${linkText}](${item.url})\n`;
                }
            }
            
            options += "\n";
        });
        
        return options;
    }
    
    generateFollowUpQuestions(agent, queryLower) {
        const followUps = {
            'buergerdienste': [
                "Haben Sie bereits alle ben√∂tigten Unterlagen zusammen? Ich kann Ihnen dabei helfen, eine Checkliste zu erstellen.",
                "M√∂chten Sie, dass ich Ihnen die n√§chsten Schritte im Detail erkl√§re?",
                "Gibt es bestimmte Aspekte des Antrags, bei denen Sie unsicher sind?",
                "Soll ich Ihnen auch die Fristen und Bearbeitungszeiten erkl√§ren?",
                "Brauchen Sie Hilfe bei der Terminvereinbarung oder haben Sie andere Fragen zum Ablauf?"
            ],
            'ratsinfo': [
                "M√∂chten Sie mehr √ºber eine bestimmte Sitzung erfahren?",
                "Soll ich Ihnen erkl√§ren, wie Sie sich zu bestimmten Themen informieren k√∂nnen?",
                "Interessieren Sie sich f√ºr bestimmte Beschl√ºsse oder Vorlagen?",
                "M√∂chten Sie wissen, wie Sie sich bei Fragen an den Kreistag wenden k√∂nnen?"
            ],
            'stellenportal': [
                "Welche Art von Stelle suchen Sie genau? Ich kann Ihnen gezielter helfen.",
                "Haben Sie bereits eine Bewerbung vorbereitet? Ich kann Ihnen dabei helfen, sie zu optimieren.",
                "M√∂chten Sie, dass ich Ihnen Tipps f√ºr ein erfolgreiches Vorstellungsgespr√§ch gebe?",
                "Soll ich Ihnen auch andere Stellenportale empfehlen?"
            ],
            'kontakte': [
                "Haben Sie bereits versucht, Kontakt aufzunehmen? Ich kann Ihnen dabei helfen, den richtigen Ansprechpartner zu finden.",
                "M√∂chten Sie, dass ich Ihnen die besten Zeiten f√ºr einen Anruf empfehle?",
                "Soll ich Ihnen auch die E-Mail-Adressen der zust√§ndigen Mitarbeiter geben?",
                "Brauchen Sie Hilfe bei der Vorbereitung Ihres Anliegens?"
            ]
        };
        
        const agentFollowUps = followUps[agent] || ["Wie kann ich Ihnen noch helfen?"];
        const randomFollowUp = agentFollowUps[Math.floor(Math.random() * agentFollowUps.length)];
        
        return randomFollowUp;
    }
    
    getAgentInfo(agent) {
        const agentInfos = {
            'buergerdienste': {
                name: 'B√ºrgerdienst-Spezialist',
                description: 'Formulare, Antr√§ge und Dienstleistungen',
                suggestion: 'Welches Formular oder welche Dienstleistung ben√∂tigen Sie genau?'
            },
            'ratsinfo': {
                name: 'Ratsinfo-Spezialist', 
                description: 'Kreistag, Sitzungen und Beschl√ºsse',
                suggestion: 'M√∂chten Sie Informationen zu einer bestimmten Sitzung oder einem Beschluss?'
            },
            'stellenportal': {
                name: 'Stellenportal-Spezialist',
                description: 'Arbeitspl√§tze und Karriere',
                suggestion: 'Welche Art von Stelle suchen Sie?'
            },
            'kontakte': {
                name: 'Kontakt-Spezialist',
                description: 'Ansprechpartner und √ñffnungszeiten',
                suggestion: 'Welchen Bereich oder welches Amt ben√∂tigen Sie?'
            },
            'jobcenter': {
                name: 'Jobcenter-Spezialist',
                description: 'Arbeitslosengeld und Jobsuche',
                suggestion: 'Ben√∂tigen Sie Hilfe beim Arbeitslosengeld oder bei der Jobsuche?'
            },
            'schule': {
                name: 'Schul-Spezialist',
                description: 'Schulangelegenheiten und Bildung',
                suggestion: 'Welche schulische Angelegenheit betrifft Sie?'
            },
            'jugend': {
                name: 'Jugend-Spezialist',
                description: 'Jugendhilfe und Jugendamt',
                suggestion: 'Welche Jugendhilfe ben√∂tigen Sie?'
            },
            'soziales': {
                name: 'Sozial-Spezialist',
                description: 'Sozialhilfe und Sozialleistungen',
                suggestion: 'Welche Sozialleistung ben√∂tigen Sie?'
            }
        };
        
        return agentInfos[agent] || {
            name: 'Allgemeiner Assistent',
            description: 'verschiedene Bereiche',
            suggestion: 'Wie kann ich Ihnen helfen?'
        };
    }
    
    createDescriptiveLinkText(title, url) {
        // Basierend auf dem Titel eine aussagekr√§ftige Beschriftung erstellen
        const titleLower = title.toLowerCase();
        const urlLower = url.toLowerCase();
        
        // Spezifische Beschriftungen basierend auf Inhalt
        if (titleLower.includes('bauantrag') || urlLower.includes('bauantrag')) {
            return "Bauantrag-Formular";
        } else if (titleLower.includes('formular') || urlLower.includes('formular')) {
            return "Antragsformular";
        } else if (titleLower.includes('kontakt') || urlLower.includes('kontakt')) {
            return "Kontaktinformationen";
        } else if (titleLower.includes('kreistag') || urlLower.includes('kreistag')) {
            return "Kreistagsinformationen";
        } else if (titleLower.includes('jugend') || urlLower.includes('jugend')) {
            return "Jugendamt-Services";
        } else if (titleLower.includes('krippe') || urlLower.includes('krippe')) {
            return "Krippen-Informationen";
        } else if (titleLower.includes('sozial') || urlLower.includes('sozial')) {
            return "Sozialleistungen";
        } else if (titleLower.includes('amt') || urlLower.includes('amt')) {
            return "Amt-Informationen";
        } else if (titleLower.includes('verwaltung') || urlLower.includes('verwaltung')) {
            return "Verwaltungsservices";
        } else if (titleLower.includes('familie') || urlLower.includes('familie')) {
            return "Familien-Services";
        } else if (titleLower.includes('wirtschaft') || urlLower.includes('wirtschaft')) {
            return "Wirtschaftliche Hilfe";
        } else if (titleLower.includes('eile') || urlLower.includes('eile')) {
            return "Eilhabe-Services";
        } else if (titleLower.includes('sicherung') || urlLower.includes('sicherung')) {
            return "Soziale Sicherung";
        } else if (titleLower.includes('tagespflege') || urlLower.includes('tagespflege')) {
            return "Tagespflege-Informationen";
        } else if (titleLower.includes('luette') || urlLower.includes('luette')) {
            return "Krippe L√ºttje L√º";
        } else if (titleLower.includes('kurzvorstellung') || urlLower.includes('kurzvorstellung')) {
            return "Amt-√úbersicht";
        } else if (titleLower.includes('landkreis') && titleLower.includes('verwaltung')) {
            return "Landkreis-Verwaltung";
        } else if (titleLower.includes('antragsarten') || urlLower.includes('antragsarten')) {
            return "Antragsarten und Unterlagen";
        } else if (titleLower.includes('favoriten') || urlLower.includes('favoriten')) {
            return "Favoriten-√úbersicht";
        } else if (titleLower.includes('eichenprozessionsspinner') || urlLower.includes('eichenprozessionsspinner')) {
            return "Eichenprozessionsspinner-Info";
        } else if (titleLower.includes('landkreis')) {
            return "Landkreis-Services";
        } else {
            // Fallback: Erste paar W√∂rter des Titels verwenden
            const words = title.split(' ').slice(0, 3);
            return words.join(' ');
        }
    }
    
    extractLinks(data) {
        const links = [];
        data.forEach(item => {
            if (item.url) {
                links.push({
                    title: item.title,
                    url: item.url
                });
            }
        });
        return links;
    }
}

module.exports = KAYACharacterHandler;