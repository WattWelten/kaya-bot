const ContextMemory = require('./context_memory');
const AdvancedPersonaDetection = require('./advanced_persona_detection');

class KAYACharacterHandler {
    constructor() {
        this.agentHandler = null; // Lazy loading f√ºr Agent Handler
        this.llmService = null; // Lazy loading
        this.useLLM = process.env.USE_LLM === 'true';
        this.contextMemory = new ContextMemory();
        this.personaDetection = new AdvancedPersonaDetection();
    }
    
    // Lazy loading f√ºr Agent Handler
    getAgentHandler() {
        if (!this.agentHandler) {
            const KAYAAgentHandler = require('./kaya_agent_handler');
        this.agentHandler = new KAYAAgentHandler();
        }
        return this.agentHandler;
    }
    
    // Lazy loading f√ºr LLM Service
    getLLMService() {
        if (!this.llmService) {
            const LLMService = require('./llm_service');
            this.llmService = new LLMService();
        }
        return this.llmService;
    }
    
    async generateResponse(query, userMessage, sessionId = 'default') {
        // Context-Memory: Nachricht zur Session hinzuf√ºgen
        this.contextMemory.addMessage(sessionId, query, 'user');
        
        // Persona-Analyse durchf√ºhren
        const session = this.contextMemory.getSession(sessionId);
        const personaAnalysis = this.personaDetection.analyzePersona(session.messages, session.context);
        
        console.log(`üß† Persona-Analyse: ${personaAnalysis.persona.persona} (${personaAnalysis.emotionalState.state}, ${personaAnalysis.urgency.level})`);
        
        // Bestimme zust√§ndigen Agent mit Session-Kontext
        const sessionContext = {
            previousIntention: session.messages.length > 1 ? 
                session.messages[session.messages.length - 2].context?.intention : null,
            conversationHistory: session.messages.slice(-3) // Letzte 3 Nachrichten
        };
        
        const agent = this.getAgentHandler().routeToAgent(query, sessionContext);
        
        let response;
        if (agent === 'kaya') {
            response = this.generateKAYAResponse(query, personaAnalysis);
        } else {
            response = this.generateAgentResponse(agent, query, personaAnalysis);
        }

        // Context-Memory: KAYA-Antwort hinzuf√ºgen mit Intention
        const intention = this.analyzeCitizenIntention(query);
        this.contextMemory.addMessage(sessionId, response.response, 'kaya', {
            agent: agent,
            persona: personaAnalysis.persona.persona,
            emotionalState: personaAnalysis.emotionalState.state,
            urgency: intention.urgency,
            intention: intention // Speichere die Intention f√ºr Kontext
        });

        // LLM-Enhancement nur f√ºr allgemeine Anfragen, NICHT f√ºr Action-orientierte Antworten
        if (this.useLLM && !response.fallback && agent === 'kaya' && !this.isActionOrientedResponse(intention)) {
            try {
                const llmService = this.getLLMService();
                const contextPrompt = this.contextMemory.generateContextPrompt(session);
                response = await llmService.enhanceResponseWithContext(response, query, contextPrompt, personaAnalysis);
            } catch (error) {
                console.error('LLM-Enhancement Fehler:', error);
                // Verwende urspr√ºngliche Antwort als Fallback
            }
        } else if (agent === 'kaya' && this.isActionOrientedResponse(intention)) {
            console.log('üéØ Action-orientierte Antwort - LLM-Enhancement √ºbersprungen');
        }

        return response;
    }
    
    generateKAYAResponse(query, personaAnalysis = null) {
        // B√ºrgerzentrierte Dialog-Optimierung
        const intention = this.analyzeCitizenIntention(query);
        const response = this.generateDirectResponse(query, intention, personaAnalysis);
        
        return {
            agent: 'kaya',
            response: response.response,
            links: response.links,
            confidence: 0.9,
            source: 'kaya',
            enhanced: false,
            context: {
                persona: personaAnalysis?.persona?.persona || 'standard_citizen',
                emotionalState: personaAnalysis?.emotionalState?.state || 'neutral',
                urgency: intention.urgency
            }
        };
    }

    /**
     * UNIVERSALE B√ºrgerzentrierte Intention-Analyse
     * Funktioniert f√ºr ALLE B√ºrger und ALLE Anliegen
     */
    analyzeCitizenIntention(query) {
        const lowerQuery = query.toLowerCase();
        
        // 1. URGENCY-Analyse (f√ºr alle B√ºrger)
        const urgency = this.analyzeUrgency(lowerQuery);
        
        // 2. EMOTIONAL STATE (f√ºr alle B√ºrger)
        const emotionalState = this.analyzeEmotionalState(lowerQuery);
        
        // 3. ACCESSIBILITY NEEDS (inklusiv f√ºr alle B√ºrger)
        const accessibilityNeeds = this.analyzeAccessibilityNeeds(lowerQuery);
        
        // 4. LOCATION (f√ºr alle B√ºrger)
        const location = this.extractLocation(query);
        
        // 5. SPECIFIC INTENTION (erweitert f√ºr alle Anliegen)
        const specificIntention = this.analyzeSpecificIntention(lowerQuery);
        
        return {
            type: specificIntention.type,
            urgency: urgency,
            emotionalState: emotionalState,
            accessibilityNeeds: accessibilityNeeds,
            location: location,
            needs: specificIntention.needs,
            specific: specificIntention.specific,
            citizenType: this.analyzeCitizenType(lowerQuery),
            language: this.analyzeLanguage(query)
        };
    }

    /**
     * Analysiert Dringlichkeit f√ºr alle B√ºrger
     */
    analyzeUrgency(query) {
        const urgentKeywords = ['eilig', 'dringend', 'sofort', 'heute', 'morgen', 'schnell', 'notfall'];
        const veryUrgentKeywords = ['notfall', 'kritisch', 'lebensgefahr', 'sofort'];
        
        if (veryUrgentKeywords.some(keyword => query.includes(keyword))) {
            return 'critical';
        }
        if (urgentKeywords.some(keyword => query.includes(keyword))) {
            return 'high';
        }
        return 'normal';
    }

    /**
     * Analysiert emotionalen Zustand f√ºr alle B√ºrger
     */
    analyzeEmotionalState(query) {
        const frustratedKeywords = ['frustriert', '√§rgerlich', 'verwirrt', 'hilflos', 'verzweifelt'];
        const anxiousKeywords = ['sorge', 'angst', 'unsicher', 'nerv√∂s'];
        const positiveKeywords = ['freundlich', 'danke', 'hilfreich', 'gut'];
        
        if (frustratedKeywords.some(keyword => query.includes(keyword))) {
            return 'frustrated';
        }
        if (anxiousKeywords.some(keyword => query.includes(keyword))) {
            return 'anxious';
        }
        if (positiveKeywords.some(keyword => query.includes(keyword))) {
            return 'positive';
        }
        return 'neutral';
    }

    /**
     * Analysiert Barrierefreiheits-Bed√ºrfnisse (inklusiv)
     */
    analyzeAccessibilityNeeds(query) {
        const needs = [];
        
        if (query.includes('blind') || query.includes('sehbehindert')) {
            needs.push('visual');
        }
        if (query.includes('taub') || query.includes('h√∂rbehindert')) {
            needs.push('hearing');
        }
        if (query.includes('rollstuhl') || query.includes('behindert')) {
            needs.push('mobility');
        }
        if (query.includes('einfach') || query.includes('leicht')) {
            needs.push('simple_language');
        }
        
        return needs;
    }

    /**
     * Analysiert B√ºrger-Typ (inklusiv f√ºr alle)
     */
    analyzeCitizenType(query) {
        if (query.includes('senior') || query.includes('rentner') || query.includes('alt')) {
            return 'senior';
        }
        if (query.includes('jugend') || query.includes('sch√ºler') || query.includes('student')) {
            return 'youth';
        }
        if (query.includes('familie') || query.includes('kind') || query.includes('baby')) {
            return 'family';
        }
        if (query.includes('gefl√ºchtet') || query.includes('migrant') || query.includes('ausl√§nder')) {
            return 'migrant';
        }
        if (query.includes('behindert') || query.includes('beeintr√§chtigt')) {
            return 'disabled';
        }
        return 'general';
    }

    /**
     * Analysiert Sprache (inklusiv)
     */
    analyzeLanguage(query) {
        // Einfache Erkennung von nicht-deutschen W√∂rtern
        const englishWords = ['hello', 'help', 'please', 'thank you'];
        const turkishWords = ['merhaba', 'yardƒ±m', 'l√ºtfen'];
        
        if (englishWords.some(word => query.toLowerCase().includes(word))) {
            return 'english';
        }
        if (turkishWords.some(word => query.toLowerCase().includes(word))) {
            return 'turkish';
        }
        return 'german';
    }

    /**
     * Analysiert spezifische Intention (erweitert f√ºr alle Anliegen)
     */
    analyzeSpecificIntention(query) {
        // Erweiterte Kategorien f√ºr alle B√ºrgeranliegen
        const intentions = [
            // Verwaltung
            { keywords: ['bauantrag', 'bauen', 'haus', 'geb√§ude'], type: 'bauantrag', needs: ['formulare', 'unterlagen', 'termin', 'kosten'] },
            { keywords: ['auto', 'fahrzeug', 'zulassen', 'kfz', 'kennzeichen'], type: 'kfz_zulassung', needs: ['termin', 'formulare', 'unterlagen', 'kosten'] },
            { keywords: ['f√ºhrerschein', 'fahrerlaubnis'], type: 'f√ºhrerschein', needs: ['termin', 'formulare', 'unterlagen', 'kosten'] },
            { keywords: ['gewerbe', 'gewerbeanmeldung', 'selbst√§ndig'], type: 'gewerbe', needs: ['formulare', 'unterlagen', 'beratung'] },
            
            // Soziales
            { keywords: ['kindergeld', 'elterngeld', 'sozialhilfe'], type: 'soziales', needs: ['formulare', 'beratung', 'unterlagen'] },
            { keywords: ['wohngeld', 'miete', 'wohnung'], type: 'wohngeld', needs: ['formulare', 'beratung', 'unterlagen'] },
            { keywords: ['pflege', 'pflegegeld', 'pflegeheim'], type: 'pflege', needs: ['beratung', 'formulare', 'unterlagen'] },
            
            // Gesundheit
            { keywords: ['gesundheit', 'arzt', 'krankenhaus'], type: 'gesundheit', needs: ['kontakt', 'informationen', 'termin'] },
            { keywords: ['impfung', 'impfpass'], type: 'impfung', needs: ['termin', 'informationen', 'formulare'] },
            
            // Bildung
            { keywords: ['schule', 'kindergarten', 'bildung'], type: 'bildung', needs: ['anmeldung', 'informationen', 'kontakt'] },
            { keywords: ['studium', 'universit√§t', 'hochschule'], type: 'studium', needs: ['informationen', 'beratung', 'anmeldung'] },
            
            // Umwelt
            { keywords: ['m√ºll', 'abfall', 'entsorgung'], type: 'umwelt', needs: ['informationen', 'termin', 'kosten'] },
            { keywords: ['wasser', 'kanalisation'], type: 'wasser', needs: ['informationen', 'kontakt', 'kosten'] },
            
            // Allgemeine Verwaltung
            { keywords: ['formular', 'antrag', 'beantragen'], type: 'formular', needs: ['download', 'ausf√ºllen', 'einreichen'] },
            { keywords: ['termin', 'vereinbaren', 'wann'], type: 'termin', needs: ['online_termin', '√∂ffnungszeiten', 'verf√ºgbarkeit'] },
            { keywords: ['kontakt', 'telefon', 'anrufen'], type: 'kontakt', needs: ['telefonnummer', 'email', 'adresse', '√∂ffnungszeiten'] },
            { keywords: ['√∂ffnungszeiten', 'wann', 'ge√∂ffnet'], type: '√∂ffnungszeiten', needs: ['zeiten', 'kontakt', 'adresse'] },
            
            // Notf√§lle
            { keywords: ['notfall', 'hilfe', 'krisen'], type: 'notfall', needs: ['sofortige_hilfe', 'kontakt', 'informationen'] }
        ];
        
        // Suche passende Intention
        for (const intention of intentions) {
            if (intention.keywords.some(keyword => query.includes(keyword))) {
                return {
                    type: intention.type,
                    needs: intention.needs,
                    specific: this.extractSpecificForm(query)
                };
            }
        }
        
        // Fallback f√ºr unbekannte Anliegen
        return {
            type: 'general_inquiry',
            needs: ['informationen', 'beratung', 'kontakt'],
            specific: null
        };
    }

    /**
     * Pr√ºft, ob es sich um eine Action-orientierte Antwort handelt
     */
    isActionOrientedResponse(intention) {
        const actionOrientedTypes = [
            'bauantrag', 'kfz_zulassung', 'f√ºhrerschein', 'gewerbe',
            'soziales', 'wohngeld', 'pflege', 'gesundheit', 'impfung',
            'bildung', 'studium', 'umwelt', 'wasser', 'notfall',
            'formular', 'termin', 'kontakt', '√∂ffnungszeiten'
        ];
        
        return actionOrientedTypes.includes(intention.type);
    }

    /**
     * UNIVERSALE B√ºrgerzentrierte Antwort-Generierung
     * Funktioniert f√ºr ALLE B√ºrger und ALLE Anliegen
     */
    generateDirectResponse(query, intention, personaAnalysis) {
        // 1. TONE basierend auf emotionalem Zustand
        const tone = this.determineTone(intention.emotionalState, intention.urgency);
        
        // 2. ACCESSIBILITY-Anpassungen
        const accessibilityAdaptations = this.getAccessibilityAdaptations(intention.accessibilityNeeds);
        
        // 3. CITIZEN-TYPE-Anpassungen
        const citizenAdaptations = this.getCitizenTypeAdaptations(intention.citizenType);
        
        // 4. LANGUAGE-Anpassungen
        const languageAdaptations = this.getLanguageAdaptations(intention.language);
        
        // 5. Spezifische Antwort generieren
        const baseResponse = this.generateSpecificResponse(intention, tone);
        
        // 6. Alle Anpassungen kombinieren
        return this.combineAdaptations(baseResponse, {
            accessibility: accessibilityAdaptations,
            citizenType: citizenAdaptations,
            language: languageAdaptations,
            urgency: intention.urgency
        });
    }

    /**
     * Bestimmt den richtigen Ton f√ºr alle B√ºrger
     */
    determineTone(emotionalState, urgency) {
        if (urgency === 'critical') {
            return 'urgent_helpful';
        }
        if (emotionalState === 'frustrated') {
            return 'calming_reassuring';
        }
        if (emotionalState === 'anxious') {
            return 'gentle_supportive';
        }
        if (emotionalState === 'positive') {
            return 'enthusiastic_helpful';
        }
        return 'friendly_professional';
    }

    /**
     * Barrierefreiheits-Anpassungen (inklusiv)
     */
    getAccessibilityAdaptations(needs) {
        const adaptations = {
            visual: {
                emphasis: '**', // Markdown f√ºr Screen Reader
                structure: 'clear_headers',
                links: 'descriptive_text'
            },
            hearing: {
                emphasis: 'üìû', // Visuelle Hinweise
                structure: 'written_instructions',
                links: 'text_based'
            },
            mobility: {
                emphasis: '‚ôø', // Barrierefreiheit-Symbol
                structure: 'step_by_step',
                links: 'accessible_locations'
            },
            simple_language: {
                emphasis: 'üìù', // Einfache Sprache
                structure: 'short_sentences',
                links: 'easy_explanations'
            }
        };
        
        return needs.map(need => adaptations[need]).filter(Boolean);
    }

    /**
     * B√ºrger-Typ-Anpassungen (inklusiv)
     */
    getCitizenTypeAdaptations(citizenType) {
        const adaptations = {
            senior: {
                tone: 'respectful_patient',
                structure: 'detailed_step_by_step',
                emphasis: 'clear_explanations'
            },
            youth: {
                tone: 'modern_friendly',
                structure: 'quick_direct',
                emphasis: 'digital_options'
            },
            family: {
                tone: 'warm_supportive',
                structure: 'family_focused',
                emphasis: 'child_friendly_options'
            },
            migrant: {
                tone: 'welcoming_helpful',
                structure: 'multilingual_support',
                emphasis: 'cultural_sensitivity'
            },
            disabled: {
                tone: 'inclusive_supportive',
                structure: 'accessible_format',
                emphasis: 'accommodation_options'
            },
            general: {
                tone: 'professional_friendly',
                structure: 'standard_format',
                emphasis: 'comprehensive_info'
            }
        };
        
        return adaptations[citizenType] || adaptations.general;
    }

    /**
     * Sprach-Anpassungen (inklusiv)
     */
    getLanguageAdaptations(language) {
        const adaptations = {
            english: {
                greeting: 'Hello!',
                closing: 'If you need help in German, just ask!',
                emphasis: 'üá¨üáß'
            },
            turkish: {
                greeting: 'Merhaba!',
                closing: 'Almanca yardƒ±ma ihtiyacƒ±nƒ±z varsa, sadece sorun!',
                emphasis: 'üáπüá∑'
            },
            german: {
                greeting: 'Moin!',
                closing: 'Gerne helfe ich Ihnen weiter!',
                emphasis: 'üá©üá™'
            }
        };
        
        return adaptations[language] || adaptations.german;
    }

    /**
     * Generiert spezifische Antworten f√ºr alle Anliegen
     */
    generateSpecificResponse(intention, tone) {
        const responseMap = {
            // Verwaltung
            'bauantrag': () => this.generateBauantragResponse(intention, tone),
            'kfz_zulassung': () => this.generateKFZZulassungResponse(intention, tone),
            'f√ºhrerschein': () => this.generateF√ºhrerscheinResponse(intention, tone),
            'gewerbe': () => this.generateGewerbeResponse(intention, tone),
            
            // Soziales
            'soziales': () => this.generateSozialesResponse(intention, tone),
            'wohngeld': () => this.generateWohngeldResponse(intention, tone),
            'pflege': () => this.generatePflegeResponse(intention, tone),
            
            // Gesundheit
            'gesundheit': () => this.generateGesundheitResponse(intention, tone),
            'impfung': () => this.generateImpfungResponse(intention, tone),
            
            // Bildung
            'bildung': () => this.generateBildungResponse(intention, tone),
            'studium': () => this.generateStudiumResponse(intention, tone),
            
            // Umwelt
            'umwelt': () => this.generateUmweltResponse(intention, tone),
            'wasser': () => this.generateWasserResponse(intention, tone),
            
            // Allgemeine Verwaltung
            'formular': () => this.generateFormularResponse(intention, tone),
            'termin': () => this.generateTerminResponse(intention, tone),
            'kontakt': () => this.generateKontaktResponse(intention, tone),
            '√∂ffnungszeiten': () => this.generate√ñffnungszeitenResponse(intention, tone),
            
            // Notf√§lle
            'notfall': () => this.generateNotfallResponse(intention, tone),
            
            // Fallback
            'general_inquiry': () => this.generateGeneralResponse(intention, tone)
        };
        
        const responseGenerator = responseMap[intention.type] || responseMap['general_inquiry'];
        return responseGenerator();
    }

    /**
     * Kombiniert alle Anpassungen f√ºr universelle Antworten
     */
    combineAdaptations(baseResponse, adaptations) {
        let response = baseResponse.response;
        
        // Accessibility-Anpassungen
        if (adaptations.accessibility.length > 0) {
            adaptations.accessibility.forEach(adaptation => {
                if (adaptation.emphasis) {
                    response = response.replace(/\*\*/g, adaptation.emphasis);
                }
            });
        }
        
        // Citizen-Type-Anpassungen
        if (adaptations.citizenType) {
            const greeting = adaptations.citizenType.tone === 'respectful_patient' ? 'Sehr geehrte Damen und Herren,' : 'Moin!';
            response = response.replace(/Moin!/g, greeting);
        }
        
        // Language-Anpassungen
        if (adaptations.language) {
            response = adaptations.language.greeting + ' ' + response.replace(/Moin!/g, '');
            response += '\n\n' + adaptations.language.closing;
        }
        
        // Urgency-Anpassungen
        if (adaptations.urgency === 'critical') {
            response = 'üö® ' + response;
        }
        
        return {
            response: response,
            links: baseResponse.links,
            urgency: adaptations.urgency,
            accessibility: adaptations.accessibility,
            citizenType: adaptations.citizenType,
            language: adaptations.language
        };
    }

    generateBauantragResponse(intention, tone) {
        const location = intention.location ? ` in ${intention.location}` : '';
        const urgency = intention.urgency === 'high' ? ' Ich verstehe, dass es eilig ist.' : '';
        
        return {
            response: `Moin! Gerne helfe ich Ihnen beim Bauantrag${location}.${urgency}

**Was Sie brauchen:**
1. **Formulare:** [Bauantrag online](https://www.oldenburg-kreis.de/planen-und-bauen/bauen-im-landkreis-oldenburg/bauantrag-online/)
2. **Unterlagen:** [Antr√§ge und Formulare](https://www.oldenburg-kreis.de/planen-und-bauen/bauen-im-landkreis-oldenburg/antraege-und-formulare/)
3. **Termin:** [Online-Terminvereinbarung](https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/online-terminvereinbarung/)

**Direkter Kontakt:**
‚Ä¢ **Tel.: 04431 85-0** (Mo-Fr 8-16 Uhr)
‚Ä¢ **E-Mail:** kontakt@landkreis-oldenburg.de

Haben Sie bereits alle Unterlagen oder brauchen Sie Hilfe bei einem bestimmten Schritt?`,
            links: [
                { title: 'Bauantrag online', url: 'https://www.oldenburg-kreis.de/planen-und-bauen/bauen-im-landkreis-oldenburg/bauantrag-online/' },
                { title: 'Antr√§ge und Formulare', url: 'https://www.oldenburg-kreis.de/planen-und-bauen/bauen-im-landkreis-oldenburg/antraege-und-formulare/' },
                { title: 'Online-Terminvereinbarung', url: 'https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/online-terminvereinbarung/' }
            ]
        };
    }

    generateFormularResponse(intention, tone) {
        const specific = intention.specific ? ` f√ºr ${intention.specific}` : '';
        
        return {
            response: `Hier sind die wichtigsten Formulare${specific}:

**Direkte Downloads:**
‚Ä¢ [Alle Antr√§ge und Formulare](https://www.oldenburg-kreis.de/planen-und-bauen/bauen-im-landkreis-oldenburg/antraege-und-formulare/)
‚Ä¢ [Online-Services](https://www.oldenburg-kreis.de/portal/)

**Schnelle Hilfe:**
‚Ä¢ **Tel.: 04431 85-0** - Wir helfen beim Ausf√ºllen
‚Ä¢ **E-Mail:** kontakt@landkreis-oldenburg.de

Welches Formular ben√∂tigen Sie genau? Dann kann ich Ihnen den direkten Link geben.`,
            links: [
                { title: 'Alle Antr√§ge und Formulare', url: 'https://www.oldenburg-kreis.de/planen-und-bauen/bauen-im-landkreis-oldenburg/antraege-und-formulare/' },
                { title: 'Online-Services', url: 'https://www.oldenburg-kreis.de/portal/' }
            ]
        };
    }

    generateKontaktResponse(intention, tone) {
        return {
            response: `**Direkte Kontakte:**

**Hauptnummer:** 04431 85-0
‚Ä¢ Mo-Fr: 8-16 Uhr
‚Ä¢ F√ºr alle Anliegen

**E-Mail:** kontakt@landkreis-oldenburg.de
‚Ä¢ Antwort innerhalb 24h

**Adresse:**
Landkreis Oldenburg
Delmenhorster Stra√üe 6
27793 Wildeshausen

**Online-Termin:** [Terminvereinbarung](https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/online-terminvereinbarung/)

Wof√ºr genau brauchen Sie Kontakt? Dann kann ich Ihnen die richtige Abteilung nennen.`,
            links: [
                { title: 'Kontaktformular', url: 'https://www.oldenburg-kreis.de/portal/kontakt.html' },
                { title: 'Online-Terminvereinbarung', url: 'https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/online-terminvereinbarung/' }
            ]
        };
    }

    generateTerminResponse(intention, tone) {
        return {
            response: `**Terminvereinbarung:**

**Online-Termin:** [Terminvereinbarung](https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/online-terminvereinbarung/)
‚Ä¢ Schnell und einfach
‚Ä¢ Verf√ºgbare Zeiten sofort sichtbar

**Telefonisch:** 04431 85-0
‚Ä¢ Mo-Fr: 8-16 Uhr
‚Ä¢ Pers√∂nliche Beratung

**√ñffnungszeiten:**
‚Ä¢ Mo-Do: 8-16 Uhr
‚Ä¢ Fr: 8-13 Uhr

F√ºr welches Anliegen brauchen Sie einen Termin?`,
            links: [
                { title: 'Online-Terminvereinbarung', url: 'https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/online-terminvereinbarung/' }
            ]
        };
    }

    generateKFZZulassungResponse(intention, tone) {
        const location = intention.location ? ` in ${intention.location}` : '';
        const urgency = intention.urgency === 'high' ? ' Ich verstehe, dass es eilig ist.' : '';
        
        return {
            response: `Moin! Perfekt - ich helfe dir sofort bei der KFZ-Zulassung${location}.${urgency}

**üéØ Hier ist dein direkter Weg:**

**1. üìã Online-Termin buchen:**
   ‚Üí [Terminvereinbarung KFZ-Zulassung](https://www.oldenburg-kreis.de/verkehr/kfz-zulassung/terminvereinbarung/)

**2. üìÑ Formulare ausf√ºllen:**
   ‚Üí [Antragsformulare KFZ](https://www.oldenburg-kreis.de/verkehr/kfz-zulassung/formulare/)

**3. üìû Sofort anrufen:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**üéØ Deine n√§chste Aktion:** Klick auf den Termin-Link oder ruf direkt an!

**Brauchst du Hilfe bei den Unterlagen? Sag mir, was du schon hast!**`,
            links: [
                { title: 'Terminvereinbarung KFZ-Zulassung', url: 'https://www.oldenburg-kreis.de/verkehr/kfz-zulassung/terminvereinbarung/' },
                { title: 'Antragsformulare KFZ', url: 'https://www.oldenburg-kreis.de/verkehr/kfz-zulassung/formulare/' }
            ]
        };
    }

    generateF√ºhrerscheinResponse(intention, tone) {
        const location = intention.location ? ` in ${intention.location}` : '';
        const urgency = intention.urgency === 'high' ? ' Ich verstehe, dass es eilig ist.' : '';
        
        return {
            response: `Moin! Gerne helfe ich dir beim F√ºhrerschein${location}.${urgency}

**üéØ Hier ist dein direkter Weg:**

**1. üìã Online-Termin buchen:**
   ‚Üí [Terminvereinbarung F√ºhrerscheine](https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/terminvereinbarung-fuehrerscheine/)

**2. üìÑ Antr√§ge und Formulare:**
   ‚Üí [F√ºhrerschein-Antr√§ge](https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/antragsarten-erforderliche-unterlagen-kosten-etc-/)

**3. üìû Sofort anrufen:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**üéØ Deine n√§chste Aktion:** Klick auf den Termin-Link oder ruf direkt an!

**Brauchst du Hilfe bei den Unterlagen? Sag mir, was du schon hast!**`,
            links: [
                { title: 'Terminvereinbarung F√ºhrerscheine', url: 'https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/terminvereinbarung-fuehrerscheine/' },
                { title: 'F√ºhrerschein-Antr√§ge', url: 'https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/antragsarten-erforderliche-unterlagen-kosten-etc-/' }
            ]
        };
    }

    generateGewerbeResponse(intention, tone) {
        const location = intention.location ? ` in ${intention.location}` : '';
        
        return {
            response: `Moin! Perfekt - ich helfe dir bei der Gewerbeanmeldung${location}.

**üéØ Hier ist dein direkter Weg:**

**1. üìã Online-Formular:**
   ‚Üí [Gewerbeanmeldung online](https://www.oldenburg-kreis.de/wirtschaft/gewerbeanmeldung/)

**2. üìÑ Antr√§ge und Formulare:**
   ‚Üí [Gewerbe-Antr√§ge](https://www.oldenburg-kreis.de/wirtschaft/gewerbeanmeldung/antraege-und-formulare/)

**3. üìû Beratung:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**üéØ Deine n√§chste Aktion:** Klick auf den Gewerbe-Link oder ruf direkt an!

**Brauchst du Hilfe bei den Unterlagen? Sag mir, was du schon hast!**`,
            links: [
                { title: 'Gewerbeanmeldung online', url: 'https://www.oldenburg-kreis.de/wirtschaft/gewerbeanmeldung/' },
                { title: 'Gewerbe-Antr√§ge', url: 'https://www.oldenburg-kreis.de/wirtschaft/gewerbeanmeldung/antraege-und-formulare/' }
            ]
        };
    }

    generateGeneralResponse(query, tone) {
        return {
            response: `Moin! Ich bin KAYA, Ihr digitaler Assistent f√ºr den Landkreis Oldenburg.

**Was kann ich f√ºr Sie tun:**
‚Ä¢ Formulare und Antr√§ge
‚Ä¢ Terminvereinbarungen  
‚Ä¢ Kontakte und √ñffnungszeiten
‚Ä¢ Informationen zu allen Dienstleistungen

**Schnelle Hilfe:**
‚Ä¢ **Tel.: 04431 85-0**
‚Ä¢ **E-Mail:** kontakt@landkreis-oldenburg.de

Was genau ben√∂tigen Sie? Je konkreter Sie fragen, desto besser kann ich helfen!`,
            links: []
        };
    }

    // NEUE UNIVERSALE RESPONSE-FUNKTIONEN F√úR ALLE B√úRGERANLIEGEN

    generateSozialesResponse(intention, tone) {
        return {
            response: `Moin! Gerne helfe ich Ihnen bei sozialen Leistungen.

**üéØ Hier ist Ihr direkter Weg:**

**1. üìã Online-Services:**
   ‚Üí [Soziale Leistungen](https://www.oldenburg-kreis.de/soziales/)

**2. üìû Beratung:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**3. üìÑ Formulare:**
   ‚Üí [Antr√§ge Soziales](https://www.oldenburg-kreis.de/soziales/antraege/)

**üéØ Ihre n√§chste Aktion:** Rufen Sie an oder besuchen Sie die Online-Services!

**Brauchen Sie Hilfe bei einem bestimmten Antrag?**`,
            links: [
                { title: 'Soziale Leistungen', url: 'https://www.oldenburg-kreis.de/soziales/' },
                { title: 'Antr√§ge Soziales', url: 'https://www.oldenburg-kreis.de/soziales/antraege/' }
            ]
        };
    }

    generateWohngeldResponse(intention, tone) {
        return {
            response: `Moin! Gerne helfe ich Ihnen beim Wohngeld.

**üéØ Hier ist Ihr direkter Weg:**

**1. üìã Wohngeld-Antrag:**
   ‚Üí [Wohngeld online](https://www.oldenburg-kreis.de/soziales/wohngeld/)

**2. üìû Beratung:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**3. üìÑ Unterlagen:**
   ‚Üí [Wohngeld-Formulare](https://www.oldenburg-kreis.de/soziales/wohngeld/formulare/)

**üéØ Ihre n√§chste Aktion:** Antrag online stellen oder anrufen!

**Haben Sie alle Unterlagen bereit?**`,
            links: [
                { title: 'Wohngeld online', url: 'https://www.oldenburg-kreis.de/soziales/wohngeld/' },
                { title: 'Wohngeld-Formulare', url: 'https://www.oldenburg-kreis.de/soziales/wohngeld/formulare/' }
            ]
        };
    }

    generatePflegeResponse(intention, tone) {
        return {
            response: `Moin! Gerne helfe ich Ihnen bei Pflege-Angelegenheiten.

**üéØ Hier ist Ihr direkter Weg:**

**1. üìã Pflege-Services:**
   ‚Üí [Pflegeportal](https://www.oldenburg-kreis.de/soziales/pflege/)

**2. üìû Beratung:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**3. üìÑ Antr√§ge:**
   ‚Üí [Pflege-Antr√§ge](https://www.oldenburg-kreis.de/soziales/pflege/antraege/)

**üéØ Ihre n√§chste Aktion:** Beratung anrufen oder Online-Services nutzen!

**Brauchen Sie Hilfe bei der Antragstellung?**`,
            links: [
                { title: 'Pflegeportal', url: 'https://www.oldenburg-kreis.de/soziales/pflege/' },
                { title: 'Pflege-Antr√§ge', url: 'https://www.oldenburg-kreis.de/soziales/pflege/antraege/' }
            ]
        };
    }

    generateGesundheitResponse(intention, tone) {
        return {
            response: `Moin! Gerne helfe ich Ihnen bei Gesundheits-Angelegenheiten.

**üéØ Hier ist Ihr direkter Weg:**

**1. üìã Gesundheits-Services:**
   ‚Üí [Gesundheitsamt](https://www.oldenburg-kreis.de/gesundheit/)

**2. üìû Beratung:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**3. üìÑ Informationen:**
   ‚Üí [Gesundheits-Info](https://www.oldenburg-kreis.de/gesundheit/informationen/)

**üéØ Ihre n√§chste Aktion:** Anrufen oder Online-Informationen nutzen!

**Worum geht es genau?**`,
            links: [
                { title: 'Gesundheitsamt', url: 'https://www.oldenburg-kreis.de/gesundheit/' },
                { title: 'Gesundheits-Info', url: 'https://www.oldenburg-kreis.de/gesundheit/informationen/' }
            ]
        };
    }

    generateImpfungResponse(intention, tone) {
        return {
            response: `Moin! Gerne helfe ich Ihnen bei Impfungen.

**üéØ Hier ist Ihr direkter Weg:**

**1. üìã Impf-Termin:**
   ‚Üí [Impf-Terminvereinbarung](https://www.oldenburg-kreis.de/gesundheit/impfungen/)

**2. üìû Beratung:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**3. üìÑ Informationen:**
   ‚Üí [Impf-Informationen](https://www.oldenburg-kreis.de/gesundheit/impfungen/informationen/)

**üéØ Ihre n√§chste Aktion:** Termin online buchen oder anrufen!

**Welche Impfung ben√∂tigen Sie?**`,
            links: [
                { title: 'Impf-Terminvereinbarung', url: 'https://www.oldenburg-kreis.de/gesundheit/impfungen/' },
                { title: 'Impf-Informationen', url: 'https://www.oldenburg-kreis.de/gesundheit/impfungen/informationen/' }
            ]
        };
    }

    generateBildungResponse(intention, tone) {
        return {
            response: `Moin! Gerne helfe ich Ihnen bei Bildungs-Angelegenheiten.

**üéØ Hier ist Ihr direkter Weg:**

**1. üìã Bildungs-Services:**
   ‚Üí [Bildungsportal](https://www.oldenburg-kreis.de/bildung/)

**2. üìû Beratung:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**3. üìÑ Anmeldungen:**
   ‚Üí [Schul-Anmeldungen](https://www.oldenburg-kreis.de/bildung/schulen/)

**üéØ Ihre n√§chste Aktion:** Online-Services nutzen oder anrufen!

**Um welche Bildungseinrichtung geht es?**`,
            links: [
                { title: 'Bildungsportal', url: 'https://www.oldenburg-kreis.de/bildung/' },
                { title: 'Schul-Anmeldungen', url: 'https://www.oldenburg-kreis.de/bildung/schulen/' }
            ]
        };
    }

    generateStudiumResponse(intention, tone) {
        return {
            response: `Moin! Gerne helfe ich Ihnen bei Studien-Angelegenheiten.

**üéØ Hier ist Ihr direkter Weg:**

**1. üìã Studien-Informationen:**
   ‚Üí [Studienberatung](https://www.oldenburg-kreis.de/bildung/studium/)

**2. üìû Beratung:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**3. üìÑ Antr√§ge:**
   ‚Üí [Studien-Antr√§ge](https://www.oldenburg-kreis.de/bildung/studium/antraege/)

**üéØ Ihre n√§chste Aktion:** Beratung anrufen oder Online-Info nutzen!

**Welche Studien-Angelegenheit betrifft Sie?**`,
            links: [
                { title: 'Studienberatung', url: 'https://www.oldenburg-kreis.de/bildung/studium/' },
                { title: 'Studien-Antr√§ge', url: 'https://www.oldenburg-kreis.de/bildung/studium/antraege/' }
            ]
        };
    }

    generateUmweltResponse(intention, tone) {
        return {
            response: `Moin! Gerne helfe ich Ihnen bei Umwelt-Angelegenheiten.

**üéØ Hier ist Ihr direkter Weg:**

**1. üìã Umwelt-Services:**
   ‚Üí [Umweltamt](https://www.oldenburg-kreis.de/umwelt/)

**2. üìû Beratung:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**3. üìÑ Informationen:**
   ‚Üí [Umwelt-Info](https://www.oldenburg-kreis.de/umwelt/informationen/)

**üéØ Ihre n√§chste Aktion:** Online-Services nutzen oder anrufen!

**Um welches Umwelt-Thema geht es?**`,
            links: [
                { title: 'Umweltamt', url: 'https://www.oldenburg-kreis.de/umwelt/' },
                { title: 'Umwelt-Info', url: 'https://www.oldenburg-kreis.de/umwelt/informationen/' }
            ]
        };
    }

    generateWasserResponse(intention, tone) {
        return {
            response: `Moin! Gerne helfe ich Ihnen bei Wasser-Angelegenheiten.

**üéØ Hier ist Ihr direkter Weg:**

**1. üìã Wasser-Services:**
   ‚Üí [Wasserwirtschaft](https://www.oldenburg-kreis.de/umwelt/wasser/)

**2. üìû Beratung:**
   ‚Üí **04431 85-0** (Mo-Fr 8-16 Uhr)

**3. üìÑ Informationen:**
   ‚Üí [Wasser-Info](https://www.oldenburg-kreis.de/umwelt/wasser/informationen/)

**üéØ Ihre n√§chste Aktion:** Online-Services nutzen oder anrufen!

**Welche Wasser-Angelegenheit betrifft Sie?**`,
            links: [
                { title: 'Wasserwirtschaft', url: 'https://www.oldenburg-kreis.de/umwelt/wasser/' },
                { title: 'Wasser-Info', url: 'https://www.oldenburg-kreis.de/umwelt/wasser/informationen/' }
            ]
        };
    }

    generate√ñffnungszeitenResponse(intention, tone) {
        return {
            response: `Moin! Hier sind die √ñffnungszeiten des Landkreises Oldenburg:

**üïí √ñffnungszeiten:**

**Verwaltung:**
‚Ä¢ **Mo-Do:** 8:00 - 16:00 Uhr
‚Ä¢ **Fr:** 8:00 - 13:00 Uhr

**üìû Telefonische Erreichbarkeit:**
‚Ä¢ **Mo-Fr:** 8:00 - 16:00 Uhr
‚Ä¢ **Tel.:** 04431 85-0

**üéØ Ihre n√§chste Aktion:** Rufen Sie an oder besuchen Sie uns!

**Brauchen Sie einen Termin?**`,
            links: [
                { title: 'Terminvereinbarung', url: 'https://www.oldenburg-kreis.de/ordnung-und-verkehr/fuehrerscheinstelle/online-terminvereinbarung/' }
            ]
        };
    }

    generateNotfallResponse(intention, tone) {
        return {
            response: `üö® **NOTFALL-HILFE**

**Sofortige Hilfe:**
‚Ä¢ **Notruf:** 112 (Feuerwehr/Rettung)
‚Ä¢ **Polizei:** 110
‚Ä¢ **√Ñrztlicher Bereitschaftsdienst:** 116 117

**Landkreis Oldenburg:**
‚Ä¢ **Tel.:** 04431 85-0 (Mo-Fr 8-16 Uhr)
‚Ä¢ **E-Mail:** kontakt@landkreis-oldenburg.de

**üéØ Ihre n√§chste Aktion:** Bei Notfall sofort 112 anrufen!

**Ist es ein Notfall oder k√∂nnen wir Ihnen anderweitig helfen?**`,
            links: [
                { title: 'Notruf 112', url: 'tel:112' },
                { title: 'Polizei 110', url: 'tel:110' }
            ]
        };
    }

    /**
     * Extrahiert Ortsangaben aus der Anfrage
     */
    extractLocation(query) {
        const locations = ['wildeshausen', 'hude', 'ganderkesee', 'hatten', 'wardenburg', 'd√∂tlingen', 'gro√üenkneten'];
        const lowerQuery = query.toLowerCase();
        
        for (const location of locations) {
            if (lowerQuery.includes(location)) {
                return location.charAt(0).toUpperCase() + location.slice(1);
            }
        }
        return null;
    }

    /**
     * Extrahiert spezifische Formular-Typen
     */
    extractSpecificForm(query) {
        const forms = {
            'bauantrag': 'Bauantrag',
            'f√ºhrerschein': 'F√ºhrerschein',
            'kfz': 'KFZ-Zulassung',
            'gewerbe': 'Gewerbeanmeldung',
            'kita': 'Kita-Anmeldung',
            'wohngeld': 'Wohngeld',
            'sozialhilfe': 'Sozialhilfe'
        };
        
        const lowerQuery = query.toLowerCase();
        for (const [key, value] of Object.entries(forms)) {
            if (lowerQuery.includes(key)) {
                return value;
            }
        }
        return null;
    }
    
    generateAgentResponse(agent, query, personaAnalysis = null) {
        const agentData = this.getAgentHandler().searchAgentData(agent, query);
        
        console.log(`Agent ${agent}: ${agentData.length} Ergebnisse f√ºr "${query}"`);
        
        if (agentData.length === 0) {
            // Fallback: Zeige allgemeine Informationen √ºber den Agent
            const agentInfo = this.getAgentInfo(agent);
            let response = {
                agent: agent,
                response: `Gerne helfe ich Ihnen bei ${agentInfo.description}. ${agentInfo.suggestion}`,
                fallback: true,
                suggestion: agentInfo.suggestion,
                confidence: 0, // Keine Daten = niedrige Konfidenz
                source: 'fallback'
            };
            
            // Persona-basierte Anpassungen f√ºr Fallback
            if (personaAnalysis) {
                if (personaAnalysis.persona.persona === 'confused_citizen') {
                    response.response = `Keine Sorge, ich helfe Ihnen gerne bei ${agentInfo.description}. ${agentInfo.suggestion}`;
                } else if (personaAnalysis.persona.persona === 'urgent_case') {
                    response.response = `Ich verstehe, dass es eilig ist. F√ºr ${agentInfo.description} kann ich Ihnen schnell helfen. ${agentInfo.suggestion}`;
                }
            }
            
            return response;
        }
        
        // Validiere Datenqualit√§t vor Antwort
        const validatedData = this.validateDataQuality(agentData);
        if (validatedData.length === 0) {
            return {
                agent: agent,
                response: `Ich habe keine verl√§sslichen Informationen zu "${query}" gefunden. Bitte kontaktieren Sie uns direkt f√ºr eine pers√∂nliche Beratung.`,
                fallback: true,
                confidence: 0,
                source: 'no_valid_data'
            };
        }
        
        // Erstelle empathische, zielgerichtete Antwort
        const response = this.createEmpatheticResponse(agent, validatedData.slice(0, 3), query);
        
        return {
            agent: agent,
            response: response,
            data: validatedData.slice(0, 3),
            links: this.extractLinks(validatedData.slice(0, 3)),
            confidence: this.calculateConfidence(validatedData, query),
            source: 'agent_data'
        };
    }
    
    validateDataQuality(data) {
        // Validiere Datenqualit√§t - nur verl√§ssliche Daten verwenden
        return data.filter(item => {
            // Mindestanforderungen f√ºr valide Daten
            return item.title && 
                   item.title.length > 10 && 
                   item.url && 
                   item.url.startsWith('http') &&
                   item.content && 
                   item.content.length > 50;
        });
    }
    
    calculateConfidence(data, query) {
        if (data.length === 0) return 0;
        
        // Berechne Konfidenz basierend auf Datenqualit√§t und Relevanz
        let confidence = 0.5; // Basis-Konfidenz
        
        // Erh√∂he Konfidenz f√ºr mehr Daten
        confidence += Math.min(data.length * 0.1, 0.3);
        
        // Erh√∂he Konfidenz f√ºr exakte Matches
        const queryLower = query.toLowerCase();
        const exactMatches = data.filter(item => 
            item.title.toLowerCase().includes(queryLower) ||
            item.content.toLowerCase().includes(queryLower)
        );
        
        if (exactMatches.length > 0) {
            confidence += 0.2;
        }
        
        return Math.min(confidence, 1.0);
    }
    
    createEmpatheticResponse(agent, data, query) {
        const queryLower = query.toLowerCase();
        
        // Empathische Einleitung basierend auf dem Anliegen
        let empatheticIntro = this.getEmpatheticIntro(agent, queryLower);
        
        // Erkl√§re den Prozess und begleite den B√ºrger
        let processExplanation = this.explainProcess(agent, queryLower);
        
        // Zeige die konkreten Optionen mit Erkl√§rungen
        let options = this.presentOptionsWithGuidance(data);
        
        // Aktive Nachfragen f√ºr weitere Unterst√ºtzung
        let followUpQuestions = this.generateFollowUpQuestions(agent, queryLower);
        
        return `${empatheticIntro}\n\n${processExplanation}\n\n${options}\n\n${followUpQuestions}`;
    }
    
    getEmpatheticIntro(agent, queryLower) {
        const intros = {
            'buergerdienste': [
                "Ich verstehe, dass Beh√∂rdeng√§nge manchmal kompliziert sein k√∂nnen. Lassen Sie mich Ihnen dabei helfen, den richtigen Weg zu finden.",
                "Gerne unterst√ºtze ich Sie bei Ihrem Anliegen. Ich erkl√§re Ihnen Schritt f√ºr Schritt, was zu tun ist.",
                "Das kann ich f√ºr Sie kl√§ren! Ich begleite Sie durch den gesamten Prozess.",
                "Kein Problem, ich helfe Ihnen gerne dabei, Ihr Anliegen erfolgreich umzusetzen."
            ],
            'ratsinfo': [
                "Ich kann Ihnen gerne bei Fragen zum Kreistag helfen. Lassen Sie mich die wichtigsten Informationen f√ºr Sie zusammenstellen.",
                "Gerne informiere ich Sie √ºber die Kreistagsangelegenheiten. Ich erkl√§re Ihnen, was Sie wissen m√ºssen.",
                "Das schaue ich gerne f√ºr Sie nach. Ich f√ºhre Sie durch die verf√ºgbaren Informationen."
            ],
            'stellenportal': [
                "Ich helfe Ihnen gerne bei der Jobsuche. Lassen Sie mich die besten M√∂glichkeiten f√ºr Sie finden.",
                "Gerne unterst√ºtze ich Sie bei Ihrer Karriereplanung. Ich zeige Ihnen, welche Optionen verf√ºgbar sind."
            ],
            'kontakte': [
                "Ich kann Ihnen gerne die richtigen Ansprechpartner nennen. Lassen Sie mich die passenden Kontakte f√ºr Sie finden.",
                "Gerne helfe ich Ihnen bei der Kontaktaufnahme. Ich erkl√§re Ihnen, wen Sie wann erreichen k√∂nnen."
            ]
        };
        
        const agentIntros = intros[agent] || ["Gerne helfe ich Ihnen bei Ihrem Anliegen."];
        return agentIntros[Math.floor(Math.random() * agentIntros.length)];
    }
    
    explainProcess(agent, queryLower) {
        const explanations = {
            'buergerdienste': [
                "Hier ist der Ablauf: Zuerst schauen wir uns an, welche Formulare Sie ben√∂tigen, dann erkl√§re ich Ihnen die einzelnen Schritte und was Sie beachten m√ºssen.",
                "Der Prozess ist eigentlich ganz √ºbersichtlich: Ich zeige Ihnen die ben√∂tigten Unterlagen und erkl√§re, wie Sie vorgehen sollten.",
                "Lassen Sie mich Ihnen den Weg durch die Beh√∂rden erkl√§ren: Welche Formulare, welche Unterlagen und welche Termine Sie einhalten m√ºssen."
            ],
            'ratsinfo': [
                "Ich erkl√§re Ihnen gerne, wie Sie an die gew√ºnschten Informationen kommen und was Sie dabei beachten sollten.",
                "Lassen Sie mich Ihnen zeigen, wo Sie die aktuellen Informationen finden und wie Sie sich √ºber neue Entwicklungen informieren k√∂nnen."
            ],
            'stellenportal': [
                "Ich f√ºhre Sie gerne durch den Bewerbungsprozess und zeige Ihnen, worauf Sie achten sollten.",
                "Lassen Sie mich Ihnen erkl√§ren, wie Sie sich erfolgreich bewerben und welche Unterlagen Sie ben√∂tigen."
            ],
            'kontakte': [
                "Ich erkl√§re Ihnen gerne, wann Sie die verschiedenen Ansprechpartner erreichen und wie Sie am besten vorgehen.",
                "Lassen Sie mich Ihnen zeigen, welche Kontakte f√ºr Ihr Anliegen am besten geeignet sind."
            ]
        };
        
        const agentExplanations = explanations[agent] || ["Ich erkl√§re Ihnen gerne den Prozess."];
        return agentExplanations[Math.floor(Math.random() * agentExplanations.length)];
    }
    
    presentOptionsWithGuidance(data) {
        let options = "";
        
        data.forEach((item, index) => {
            if (item.title) {
                options += `**${item.title}**\n`;
                
                // F√ºge hilfreiche Erkl√§rung und Anleitung hinzu
                if (item.title.toLowerCase().includes('bauantrag')) {
                    options += "Das ist Ihr Hauptformular f√ºr Bauvorhaben. Sie k√∂nnen es online ausf√ºllen oder ausdrucken. Wichtig: Sammeln Sie alle ben√∂tigten Unterlagen vorher (Grundst√ºcksunterlagen, Baupl√§ne, etc.).\n";
                } else if (item.title.toLowerCase().includes('formular')) {
                    options += "Hier finden Sie das ben√∂tigte Formular. Ich empfehle Ihnen, es online auszuf√ºllen - das spart Zeit und Fehler.\n";
                } else if (item.title.toLowerCase().includes('kontakt')) {
                    options += "Hier k√∂nnen Sie direkt Kontakt aufnehmen. Ich empfehle Ihnen, vorher anzurufen, um einen Termin zu vereinbaren.\n";
                } else if (item.title.toLowerCase().includes('kreistag')) {
                    options += "Hier finden Sie alle aktuellen Informationen. Schauen Sie regelm√§√üig vorbei, um √ºber neue Beschl√ºsse informiert zu bleiben.\n";
                }
                
                if (item.url) {
                    const linkText = this.createDescriptiveLinkText(item.title, item.url);
                    options += `\nüìã **${linkText}:** [${linkText}](${item.url})\n`;
                }
            }
            
            options += "\n";
        });
        
        return options;
    }
    
    generateFollowUpQuestions(agent, queryLower) {
        const followUps = {
            'buergerdienste': [
                "Haben Sie bereits alle ben√∂tigten Unterlagen zusammen? Ich kann Ihnen dabei helfen, eine Checkliste zu erstellen.",
                "M√∂chten Sie, dass ich Ihnen die n√§chsten Schritte im Detail erkl√§re?",
                "Gibt es bestimmte Aspekte des Antrags, bei denen Sie unsicher sind?",
                "Soll ich Ihnen auch die Fristen und Bearbeitungszeiten erkl√§ren?",
                "Brauchen Sie Hilfe bei der Terminvereinbarung oder haben Sie andere Fragen zum Ablauf?"
            ],
            'ratsinfo': [
                "M√∂chten Sie mehr √ºber eine bestimmte Sitzung erfahren?",
                "Soll ich Ihnen erkl√§ren, wie Sie sich zu bestimmten Themen informieren k√∂nnen?",
                "Interessieren Sie sich f√ºr bestimmte Beschl√ºsse oder Vorlagen?",
                "M√∂chten Sie wissen, wie Sie sich bei Fragen an den Kreistag wenden k√∂nnen?"
            ],
            'stellenportal': [
                "Welche Art von Stelle suchen Sie genau? Ich kann Ihnen gezielter helfen.",
                "Haben Sie bereits eine Bewerbung vorbereitet? Ich kann Ihnen dabei helfen, sie zu optimieren.",
                "M√∂chten Sie, dass ich Ihnen Tipps f√ºr ein erfolgreiches Vorstellungsgespr√§ch gebe?",
                "Soll ich Ihnen auch andere Stellenportale empfehlen?"
            ],
            'kontakte': [
                "Haben Sie bereits versucht, Kontakt aufzunehmen? Ich kann Ihnen dabei helfen, den richtigen Ansprechpartner zu finden.",
                "M√∂chten Sie, dass ich Ihnen die besten Zeiten f√ºr einen Anruf empfehle?",
                "Soll ich Ihnen auch die E-Mail-Adressen der zust√§ndigen Mitarbeiter geben?",
                "Brauchen Sie Hilfe bei der Vorbereitung Ihres Anliegens?"
            ]
        };
        
        const agentFollowUps = followUps[agent] || ["Wie kann ich Ihnen noch helfen?"];
        const randomFollowUp = agentFollowUps[Math.floor(Math.random() * agentFollowUps.length)];
        
        return randomFollowUp;
    }
    
    getAgentInfo(agent) {
        const agentInfos = {
            'buergerdienste': {
                name: 'B√ºrgerdienst-Spezialist',
                description: 'Formulare, Antr√§ge und Dienstleistungen',
                suggestion: 'Welches Formular oder welche Dienstleistung ben√∂tigen Sie genau?'
            },
            'ratsinfo': {
                name: 'Ratsinfo-Spezialist', 
                description: 'Kreistag, Sitzungen und Beschl√ºsse',
                suggestion: 'M√∂chten Sie Informationen zu einer bestimmten Sitzung oder einem Beschluss?'
            },
            'stellenportal': {
                name: 'Stellenportal-Spezialist',
                description: 'Arbeitspl√§tze und Karriere',
                suggestion: 'Welche Art von Stelle suchen Sie?'
            },
            'kontakte': {
                name: 'Kontakt-Spezialist',
                description: 'Ansprechpartner und √ñffnungszeiten',
                suggestion: 'Welchen Bereich oder welches Amt ben√∂tigen Sie?'
            },
            'jobcenter': {
                name: 'Jobcenter-Spezialist',
                description: 'Arbeitslosengeld und Jobsuche',
                suggestion: 'Ben√∂tigen Sie Hilfe beim Arbeitslosengeld oder bei der Jobsuche?'
            },
            'schule': {
                name: 'Schul-Spezialist',
                description: 'Schulangelegenheiten und Bildung',
                suggestion: 'Welche schulische Angelegenheit betrifft Sie?'
            },
            'jugend': {
                name: 'Jugend-Spezialist',
                description: 'Jugendhilfe und Jugendamt',
                suggestion: 'Welche Jugendhilfe ben√∂tigen Sie?'
            },
            'soziales': {
                name: 'Sozial-Spezialist',
                description: 'Sozialhilfe und Sozialleistungen',
                suggestion: 'Welche Sozialleistung ben√∂tigen Sie?'
            }
        };
        
        return agentInfos[agent] || {
            name: 'Allgemeiner Assistent',
            description: 'verschiedene Bereiche',
            suggestion: 'Wie kann ich Ihnen helfen?'
        };
    }
    
    createDescriptiveLinkText(title, url) {
        // Basierend auf dem Titel eine aussagekr√§ftige Beschriftung erstellen
        const titleLower = title.toLowerCase();
        const urlLower = url.toLowerCase();
        
        // Spezifische Beschriftungen basierend auf Inhalt
        if (titleLower.includes('bauantrag') || urlLower.includes('bauantrag')) {
            return "Bauantrag-Formular";
        } else if (titleLower.includes('formular') || urlLower.includes('formular')) {
            return "Antragsformular";
        } else if (titleLower.includes('kontakt') || urlLower.includes('kontakt')) {
            return "Kontaktinformationen";
        } else if (titleLower.includes('kreistag') || urlLower.includes('kreistag')) {
            return "Kreistagsinformationen";
        } else if (titleLower.includes('jugend') || urlLower.includes('jugend')) {
            return "Jugendamt-Services";
        } else if (titleLower.includes('krippe') || urlLower.includes('krippe')) {
            return "Krippen-Informationen";
        } else if (titleLower.includes('sozial') || urlLower.includes('sozial')) {
            return "Sozialleistungen";
        } else if (titleLower.includes('amt') || urlLower.includes('amt')) {
            return "Amt-Informationen";
        } else if (titleLower.includes('verwaltung') || urlLower.includes('verwaltung')) {
            return "Verwaltungsservices";
        } else if (titleLower.includes('familie') || urlLower.includes('familie')) {
            return "Familien-Services";
        } else if (titleLower.includes('wirtschaft') || urlLower.includes('wirtschaft')) {
            return "Wirtschaftliche Hilfe";
        } else if (titleLower.includes('eile') || urlLower.includes('eile')) {
            return "Eilhabe-Services";
        } else if (titleLower.includes('sicherung') || urlLower.includes('sicherung')) {
            return "Soziale Sicherung";
        } else if (titleLower.includes('tagespflege') || urlLower.includes('tagespflege')) {
            return "Tagespflege-Informationen";
        } else if (titleLower.includes('luette') || urlLower.includes('luette')) {
            return "Krippe L√ºttje L√º";
        } else if (titleLower.includes('kurzvorstellung') || urlLower.includes('kurzvorstellung')) {
            return "Amt-√úbersicht";
        } else if (titleLower.includes('landkreis') && titleLower.includes('verwaltung')) {
            return "Landkreis-Verwaltung";
        } else if (titleLower.includes('antragsarten') || urlLower.includes('antragsarten')) {
            return "Antragsarten und Unterlagen";
        } else if (titleLower.includes('favoriten') || urlLower.includes('favoriten')) {
            return "Favoriten-√úbersicht";
        } else if (titleLower.includes('eichenprozessionsspinner') || urlLower.includes('eichenprozessionsspinner')) {
            return "Eichenprozessionsspinner-Info";
        } else if (titleLower.includes('landkreis')) {
            return "Landkreis-Services";
        } else {
            // Fallback: Erste paar W√∂rter des Titels verwenden
            const words = title.split(' ').slice(0, 3);
            return words.join(' ');
        }
    }
    
    extractLinks(data) {
        const links = [];
        data.forEach(item => {
            if (item.url) {
                links.push({
                    title: item.title,
                    url: item.url
                });
            }
        });
        return links;
    }
}

module.exports = KAYACharacterHandler;