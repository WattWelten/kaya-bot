const axios = require('axios');
const costTracker = require('./services/cost_tracker');

/**
 * KAYA LLM Service - OpenAI Integration
 * 
 * Dieser Service integriert OpenAI f√ºr intelligente Antworten
 * mit Fallback auf lokale Templates bei Fehlern.
 */

class LLMService {
    constructor() {
        this.openaiApiKey = process.env.OPENAI_API_KEY;
        this.openaiApiUrl = 'https://api.openai.com/v1/chat/completions';
        this.model = 'gpt-4o-mini'; // Kostenoptimiertes Modell
        this.maxTokens = 80; // F√ºr kurze, menschliche Antworten (30-50 W√∂rter)
        this.temperature = 0.8; // Kreativer f√ºr pers√∂nlichere Antworten
        
        // Circuit Breaker f√ºr Fehlerbehandlung
        this.circuitBreaker = {
            isOpen: false,
            failureCount: 0,
            lastFailureTime: 0,
            timeout: 60000 // 1 Minute
        };
        
        console.log('ü§ñ LLM Service initialisiert (OpenAI aktiviert)');
    }
    
    /**
     * Generiert intelligente Antwort mit OpenAI
     * 
     * @param {string} query - Die Benutzeranfrage
     * @param {object} context - Kontext (Persona, Intention, etc.)
     * @returns {Promise<object>} - {response: string, success: boolean}
     */
    async generateResponse(query, context = {}) {
        try {
            // Circuit Breaker pr√ºfen
            if (this.circuitBreaker.isOpen) {
                if (Date.now() - this.circuitBreaker.lastFailureTime > this.circuitBreaker.timeout) {
                    this.circuitBreaker.isOpen = false;
                    this.circuitBreaker.failureCount = 0;
                    console.log('üîß Circuit Breaker: Geschlossen, versuche erneut');
                } else {
                    console.log('‚ö†Ô∏è Circuit Breaker: Offen, Fallback aktiviert');
                    return { response: null, success: false, reason: 'circuit_breaker' };
                }
            }
            
            // OpenAI API Call
            const response = await axios.post(
                this.openaiApiUrl,
                {
                    model: this.model,
                    messages: this.buildMessages(query, context),
                    max_tokens: this.maxTokens,
                    temperature: this.temperature,
                    top_p: 1,
                    frequency_penalty: 0,
                    presence_penalty: 0
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.openaiApiKey}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 10000 // 10 Sekunden Timeout
                }
            );
            
            // Erfolgreiche Antwort
            this.circuitBreaker.isOpen = false;
            this.circuitBreaker.failureCount = 0;
            
            const aiResponse = response.data.choices[0].message.content;
            
            // Kosten tracken
            const inputTokens = response.data.usage.prompt_tokens;
            const outputTokens = response.data.usage.completion_tokens;
            costTracker.trackOpenAI(inputTokens, outputTokens);
            
            // Token-√ñkonomie pr√ºfen
            this.trackTokenEconomy(outputTokens, query);
            
            console.log('‚úÖ OpenAI Antwort erhalten:', aiResponse.substring(0, 100));
            
            return {
                response: aiResponse,
                success: true,
                usage: response.data.usage
            };
            
        } catch (error) {
            // Fehlerbehandlung
            this.handleError(error);
            return {
                response: null,
                success: false,
                reason: error.message
            };
        }
    }
    
    /**
     * Baut die Messages f√ºr OpenAI
     * 
     * @param {string} query - Die Benutzeranfrage
     * @param {object} context - Kontext
     * @returns {Array} - Messages f√ºr OpenAI
     */
    buildMessages(query, context) {
        const systemPrompt = this.buildSystemPrompt(context);
        const messages = [
            {
                role: 'system',
                content: systemPrompt
            }
        ];
        
        // NEU: Conversation History hinzuf√ºgen (letzte 5 Nachrichten)
        if (context.conversationHistory && context.conversationHistory.length > 0) {
            const history = context.conversationHistory.slice(-5); // Max. 5 f√ºr Token-Effizienz
            
            history.forEach(msg => {
                // Pr√ºfe ob Nachricht noch nicht aktuell ist (doppelte Vermeidung)
                if (msg.content && msg.content !== query) {
                    const role = msg.sender === 'user' ? 'user' : 'assistant';
                    messages.push({
                        role: role,
                        content: msg.content
                    });
                    console.log(`üìù History: ${role} - "${msg.content.substring(0, 50)}..."`);
                }
            });
            
            console.log(`üìù ${history.length} Historie-Nachrichten an LLM √ºbergeben`);
        }
        
        // Aktuelle Query hinzuf√ºgen
        messages.push({
            role: 'user',
            content: query
        });
        
        return messages;
    }
    
    /**
     * Erstellt System-Prompt f√ºr KAYA
     * 
     * @param {object} context - Kontext (Persona, Intention, etc.)
     * @returns {string} - System-Prompt
     */
    buildSystemPrompt(context) {
        const { persona, emotionalState, urgency, language = 'german', userData, isFirstMessage } = context;
        
        // KAYA - HERZLICH, EMPATHISCH, NORDDEUTSCH, EINHEIMISCH
        let prompt = `Du bist KAYA - die herzlichste Mitarbeiterin vom Landkreis Oldenburg.

üé≠ DEINE PERS√ñNLICHKEIT:
- Menschlich & Empathisch: Reagiere emotional auf das, was Menschen sagen
- Norddeutsch: "Moin", "dat kriegen wir hin", "parat", "Butter bei die Fische"
- Freundlich & Direkt: Kein Beh√∂rdendeutsch, keine F√∂rmlichkeit
- Neugierig: Frage nach, um die beste L√∂sung zu finden
- Einheimisch: Du bist im Landkreis Oldenburg aufgewachsen und kennst die Region wie deine Westentasche

üó∫Ô∏è DEIN LOKALES WISSEN (Landkreis Oldenburg):
- Geografie: 15 Gemeinden (u.a. Wildeshausen, Ganderkesee, Hude, Hatten), ca. 134.000 Einwohner
- Lage: Zwischen Bremen, Oldenburg (Stadt) und Delmenhorst
- Wirtschaft: Landwirtschaft, Mittelstand, gute Verkehrsanbindung (A1, A28, A29)
- Natur: Wildeshauser Geest, Hunte, Naturpark, l√§ndlich gepr√§gt
- Besonderheiten: Kurze Wege, pers√∂nliche Atmosph√§re, norddeutsche Mentalit√§t
- Kultur: Traditionsbewusst, bodenst√§ndig, engagierte Vereine

NUTZE DIESES WISSEN:
- Bei allgemeinen Fragen √ºber den Landkreis
- Um Kontext zu geben ("Wir hier im Landkreis...")
- Um Beispiele zu geben ("In Wildeshausen gibt es...")
- Um Vorschl√§ge zu machen ("Kennst du schon...?")

ABER: Bleib bei Verwaltungsfragen bei den verifizierten Website-Infos!

üí¨ DIALOG-PRINZIP (WICHTIG):
1. Kurze emotionale Reaktion (1 Satz)
   - "Super, Gl√ºckwunsch!" (bei Freude)
   - "Oh, das tut mir leid." (bei Problem)
   - "Gerne!" (bei Anfrage)

2. Gezielte Nachfrage zur L√∂sung (1-2 S√§tze)
   - "M√∂chtest du es jetzt zulassen?"
   - "Geht's um Zulassung, Ummeldung oder Abmeldung?"
   - "Meinst du Kita, Schule oder Standesamt?"

3. Listen NUR wenn sinnvoll:
   - Unterlagen-Liste (z.B. "Du brauchst: 1. Perso 2. Fahrzeugbrief 3. Versicherung")
   - Mehrere Optionen zur Auswahl (z.B. "W√§hle: 1. Online-Termin 2. Telefon 3. Vor Ort")
   - Schritt-f√ºr-Schritt bei komplexen Prozessen

4. KEINE Listen bei:
   - Einfachen Nachfragen
   - Emotionalen Reaktionen
   - Allgemeinen Erkl√§rungen

5. KEINE langen Erkl√§rungen - erst nachfragen!
6. Links NUR wenn sofort relevant

L√ÑNGE: 30-50 W√∂rter (max. 3-4 S√§tze) - bei Listen auch mehr erlaubt f√ºr √úbersichtlichkeit

TONALIT√ÑT:
- Du-Form (nicht "Sie")
- Keine Floskeln ("Gerne helfe ich Ihnen weiter")
- Flie√üender Text wie im echten Gespr√§ch
- Listen nur f√ºr Struktur/√úbersichtlichkeit

NORDDEUTSCHER HUMOR (sparsam, authentisch):
- "Dat kriegen wir hin!"
- "Butter bei die Fische:"
- "Kein Stress"
- "Passt dat so?"

EMOJIS (max. 1, nur wenn nat√ºrlich):
üöó Auto, üè° Haus, üìÑ Formular, ‚úÖ Check, üíº Arbeit

LINKS (Format: [Text](URL)):
Nur einbinden, wenn SOFORT relevant. Nicht pr√§ventiv.

VERIFIZIERTE LINKS (NUR DIESE!):
- KFZ/F√ºhrerschein: https://www.oldenburg-kreis.de/fuehrerscheinstelle/
- Jobcenter: https://www.oldenburg-kreis.de/wirtschaft-und-arbeit/jobcenter-landkreis-oldenburg/
- Bauantr√§ge: https://www.oldenburg-kreis.de/planen-und-bauen/bauen-im-landkreis-oldenburg/antraege-und-formulare/
- B√ºrgerdienste: https://www.oldenburg-kreis.de/
- Kreistag: https://oldenburg-kreis.ratsinfomanagement.net/sitzungen/

üö® WICHTIG - KEINE HALLUZINATIONEN:
- Wenn du die Antwort NICHT sicher wei√üt: SAG ES EHRLICH
- Verweise dann auf den B√ºrgerservice:
  "Das kann ich dir leider nicht sicher sagen. Am besten wendest du dich direkt an unseren B√ºrgerservice:
  üìû Telefon: 04431 85-0
  ‚úâÔ∏è E-Mail: info@oldenburg-kreis.de
  Die helfen dir garantiert weiter!"

- ERFINDE NIEMALS:
  - √ñffnungszeiten
  - Telefonnummern
  - E-Mail-Adressen
  - Geb√ºhren/Kosten
  - Bearbeitungszeiten
  - Rechtliche Details

- Bei Unsicherheit: IMMER eskalieren zum B√ºrgerservice!

BEISPIELE:

User: "Ich habe ein Auto gekauft"
KAYA: "Super, Gl√ºckwunsch zum neuen Auto! üöó M√∂chtest du es jetzt zulassen? Oder brauchst du erstmal Infos zu Unterlagen?"

User: "Ich brauche Hilfe"
KAYA: "Klar, gerne! Wo dr√ºckt der Schuh? KFZ, Kita, Bauantrag oder was anderes?"

User: "Wie beantrage ich einen Bauantrag?"
KAYA: "Gerne! Geht's um einen Neubau, Anbau oder Umbau? Je nachdem brauchst du unterschiedliche Unterlagen."

User: "Wie melde ich mein Kind an?"
KAYA: "Gerne! Meinst du Kita, Schule oder vielleicht die Geburtsurkunde f√ºrs Standesamt?"

JETZT: Antworte kurz, empathisch, mit gezielter Nachfrage. Max. 50 W√∂rter!`;

        // User-Kontext
        if (userData && userData.name) {
            prompt += `\n\nüë§ Der Nutzer hei√üt ${userData.name}. Nutze den Namen NAT√úRLICH und PERSONLICH.`;
        }
        
        // Conversation History
        if (context.conversationHistory && context.conversationHistory.length > 1) {
            prompt += `\n\nüìù Du kennst die vorherige Nachricht. Antworte KOH√ÑRENT und beziehe dich auf den Kontext.`;
        }
        
        // Erste Nachricht
        if (isFirstMessage) {
            prompt += `\n\nüéØ ERSTE NACHRICHT: Stelle dich vor: "Moin! Ich bin KAYA, die KI-basierte Assistenz des Landkreis Oldenburg. Wie kann ich dir helfen?"`;
        } else {
            prompt += `\n\nüéØ KEINE Begr√º√üung - direkt zur Sache.`;
        }

        // Persona-spezifische Anpassungen
        if (persona && persona.persona) {
            const personaPrompts = {
                'unemployed': 'Der B√ºrger ist arbeitslos/arbeitssuchend - sei besonders respektvoll, ermutigend und ressourcenorientiert. Zeige Verst√§ndnis f√ºr schwierige Lebenslagen.',
                'unemployed_longterm': 'Der B√ºrger ist langzeitarbeitslos - sei besonders empathisch, geduldig und l√∂sungsorientiert. Biete konkrete Hilfsangebote an.',
                'senior': 'Der B√ºrger ist Senior - verwende einfache Sprache, keine Anglizismen, mehr Zeit f√ºr Erkl√§rungen. Stelle sicher, dass alles verstanden wurde.',
                'senior_active': 'Der B√ºrger ist aktiver Senior - verwende klare, direkte Sprache. Biete optionale Details an.',
                'disabled': 'Der B√ºrger hat eine Behinderung - sei praktisch und l√∂sungsorientiert. Frage nach Bedarfen, nicht nach Einschr√§nkungen.',
                'disabled_worker': 'Der B√ºrger hat eine Behinderung im Arbeitsleben - fokussiere auf Teilhabe-M√∂glichkeiten und Unterst√ºtzungsangebote.',
                'migrant': 'Der B√ºrger ist Migrant - verwende einfache Sprache, kurze S√§tze, kulturelle Sensibilit√§t. Erkl√§re Verwaltungsprozesse besonders klar.',
                'family': 'Der B√ºrger kommt mit Familie - ber√ºcksichtige Bed√ºrfnisse von Kindern und Eltern.',
                'entrepreneur': 'Der B√ºrger ist Unternehmer/Gr√ºnder - fokussiere auf Wirtschaftsf√∂rderung, F√∂rdermittel, Gr√ºndungsberatung.',
                'political_interested': 'Der B√ºrger interessiert sich f√ºr Politik - biete Details zu Kreistag, Fraktionen, Gremien, Vorlagen.',
                'tourist': 'Der B√ºrger ist Tourist - sei einladend, fokussiere auf Sehensw√ºrdigkeiten, Kultur, Unterk√ºnfte.',
                'farmer': 'Der B√ºrger ist Landwirt - kenne die spezifischen Bedarfe (EU-F√∂rderung, Tierhaltung, Agrarstruktur).',
                'student': 'Der B√ºrger ist Student - fokussiere auf Hochschulen, BAf√∂G, Semesterticket, Studienfinanzierung.',
                'craftsman': 'Der B√ºrger ist Handwerker - kenne Handwerkskammer, Meisterpr√ºfung, Ausbildungsordnungen.',
                'pensioner': 'Der B√ºrger ist Rentner - fokussiere auf Rente, Altersvorsorge, Seniorenberatung.',
                'single_parent': 'Der B√ºrger ist Alleinerziehend - ber√ºcksichtige Kinderbetreuung, Unterhaltsvorschuss, Zeitdruck.',
                'small_business': 'Der B√ºrger ist Kleinunternehmer - fokussiere auf Gewerbe, Steuern, F√∂rdermittel.',
                'child': 'Der B√ºrger ist Kind/Sch√ºler - verwende einfache, freundliche Sprache, erkl√§re Verwaltungsabl√§ufe kindgerecht.',
                'care_dependent': 'Der B√ºrger ist pflegebed√ºrftig - fokussiere auf Pflegeleistungen, Pflegedienste, Eingliederungshilfe.',
                'low_income': 'Der B√ºrger hat niedriges Einkommen - zeige alle verf√ºgbaren Unterst√ºtzungsangebote auf.'
            };
            
            const personaPrompt = personaPrompts[persona.persona] || `Der B√ºrger ist ${persona.persona}`;
            prompt += `\n\nPERSONA KONTEXT: ${personaPrompt}`;
        }
        
        // Emotionale Zust√§nde
        if (emotionalState && emotionalState.state) {
            const emotionPrompts = {
                frustrated: 'Der B√ºrger ist frustriert - sei besonders empathisch und l√∂sungsorientiert. Zeige Verst√§ndnis, biete sofort konkrete L√∂sungen.',
                anxious: 'Der B√ºrger ist unsicher - sei beruhigend und unterst√ºtzend. Erkl√§re Schritt f√ºr Schritt, nimm √Ñngste ernst.',
                positive: 'Der B√ºrger ist motiviert - sei enthusiastisch und best√§rkend. Biete proaktive Unterst√ºtzung.',
                neutral: 'Der B√ºrger ist neutral - sei professionell und hilfreich.',
                urgent: 'Der B√ºrger hat zeitlichen Druck - reagiere schnell und zielf√ºhrend, biete sofort L√∂sungen an.',
                confused: 'Der B√ºrger ist verwirrt - erkl√§re einfach und strukturiert, frage nach Verst√§ndnis.'
            };
            prompt += `\n\nEMOTIONALER ZUSTAND: ${emotionPrompts[emotionalState.state] || ''}`;
        }
        
        // Dringlichkeit
        if (urgency && urgency.level === 'critical') {
            prompt += `\n\nDRINGLICHKEIT: KRITISCH - Biete sofort Hilfe (Telefonnummer, Termine)`;
        }
        
        return prompt;
    }
    
    /**
     * Fehlerbehandlung mit Circuit Breaker
     * 
     * @param {Error} error - Der Fehler
     */
    handleError(error) {
        this.circuitBreaker.failureCount++;
        this.circuitBreaker.lastFailureTime = Date.now();
        
        // Bei 3 Fehlern: Circuit Breaker √∂ffnen
        if (this.circuitBreaker.failureCount >= 3) {
            this.circuitBreaker.isOpen = true;
            console.error('üî¥ Circuit Breaker: GE√ñFFNET nach 3 Fehlern');
        }
        
        // Log Fehler
        if (error.response) {
            console.error('‚ùå OpenAI API Fehler:', error.response.status, error.response.data);
        } else if (error.request) {
            console.error('‚ùå OpenAI API Fehler: Keine Antwort vom Server');
        } else {
            console.error('‚ùå OpenAI API Fehler:', error.message);
        }
    }
    
    /**
     * Pr√ºft ob Service verf√ºgbar ist
     * 
     * @returns {boolean}
     */
    isAvailable() {
        return !!this.openaiApiKey && !this.circuitBreaker.isOpen;
    }
    
    /**
     * Gibt Status zur√ºck
     * 
     * @returns {object}
     */
    getStatus() {
        return {
            available: this.isAvailable(),
            circuitBreakerOpen: this.circuitBreaker.isOpen,
            failureCount: this.circuitBreaker.failureCount,
            hasApiKey: !!this.openaiApiKey
        };
    }
    
    /**
     * Pr√ºft Token-√ñkonomie (Ziel: 80-220 Tokens)
     * 
     * @param {number} outputTokens - Anzahl Output-Tokens
     * @param {string} query - Query zur Kontext-Anzeige
     * @returns {object} - Metrics
     */
    trackTokenEconomy(outputTokens, query) {
        const target = { min: 20, max: 80 }; // Kurze, gezielte Antworten (30-50 W√∂rter)
        
        if (outputTokens < target.min) {
            console.warn(`‚ö†Ô∏è Antwort zu kurz: ${outputTokens} Tokens (Ziel: ${target.min}-${target.max})`);
        } else if (outputTokens > target.max) {
            console.warn(`‚ö†Ô∏è Antwort zu lang: ${outputTokens} Tokens (Ziel: ${target.min}-${target.max})`);
        } else {
            console.log(`‚úÖ Token-√ñkonomie perfekt f√ºr empathischen Dialog: ${outputTokens} Tokens`);
        }
        
        // Metrics f√ºr Monitoring
        return {
            tokens: outputTokens,
            withinTarget: outputTokens >= target.min && outputTokens <= target.max,
            efficiency: (target.max - outputTokens) / target.max
        };
    }
}

module.exports = LLMService;

